
sevenSeg3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fac  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003138  08003138  00013138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003178  08003178  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003180  08003180  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000024  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000400  200000a0  200000a0  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003e60  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000fd0  00000000  00000000  00023f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000418  00000000  00000000  00024ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000380  00000000  00000000  000252f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f80b  00000000  00000000  00025678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005259  00000000  00000000  00044e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf3e2  00000000  00000000  0004a0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001094be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001364  00000000  00000000  00109510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800311c 	.word	0x0800311c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800311c 	.word	0x0800311c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295
 8000af4:	f000 b974 	b.w	8000de0 <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9d08      	ldr	r5, [sp, #32]
 8000b16:	4604      	mov	r4, r0
 8000b18:	468e      	mov	lr, r1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d14d      	bne.n	8000bba <__udivmoddi4+0xaa>
 8000b1e:	428a      	cmp	r2, r1
 8000b20:	4694      	mov	ip, r2
 8000b22:	d969      	bls.n	8000bf8 <__udivmoddi4+0xe8>
 8000b24:	fab2 f282 	clz	r2, r2
 8000b28:	b152      	cbz	r2, 8000b40 <__udivmoddi4+0x30>
 8000b2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2e:	f1c2 0120 	rsb	r1, r2, #32
 8000b32:	fa20 f101 	lsr.w	r1, r0, r1
 8000b36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b3a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b3e:	4094      	lsls	r4, r2
 8000b40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b44:	0c21      	lsrs	r1, r4, #16
 8000b46:	fbbe f6f8 	udiv	r6, lr, r8
 8000b4a:	fa1f f78c 	uxth.w	r7, ip
 8000b4e:	fb08 e316 	mls	r3, r8, r6, lr
 8000b52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b56:	fb06 f107 	mul.w	r1, r6, r7
 8000b5a:	4299      	cmp	r1, r3
 8000b5c:	d90a      	bls.n	8000b74 <__udivmoddi4+0x64>
 8000b5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b66:	f080 811f 	bcs.w	8000da8 <__udivmoddi4+0x298>
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	f240 811c 	bls.w	8000da8 <__udivmoddi4+0x298>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	1a5b      	subs	r3, r3, r1
 8000b76:	b2a4      	uxth	r4, r4
 8000b78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b84:	fb00 f707 	mul.w	r7, r0, r7
 8000b88:	42a7      	cmp	r7, r4
 8000b8a:	d90a      	bls.n	8000ba2 <__udivmoddi4+0x92>
 8000b8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b94:	f080 810a 	bcs.w	8000dac <__udivmoddi4+0x29c>
 8000b98:	42a7      	cmp	r7, r4
 8000b9a:	f240 8107 	bls.w	8000dac <__udivmoddi4+0x29c>
 8000b9e:	4464      	add	r4, ip
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba6:	1be4      	subs	r4, r4, r7
 8000ba8:	2600      	movs	r6, #0
 8000baa:	b11d      	cbz	r5, 8000bb4 <__udivmoddi4+0xa4>
 8000bac:	40d4      	lsrs	r4, r2
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d909      	bls.n	8000bd2 <__udivmoddi4+0xc2>
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	f000 80ef 	beq.w	8000da2 <__udivmoddi4+0x292>
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bca:	4630      	mov	r0, r6
 8000bcc:	4631      	mov	r1, r6
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	fab3 f683 	clz	r6, r3
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d14a      	bne.n	8000c70 <__udivmoddi4+0x160>
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d302      	bcc.n	8000be4 <__udivmoddi4+0xd4>
 8000bde:	4282      	cmp	r2, r0
 8000be0:	f200 80f9 	bhi.w	8000dd6 <__udivmoddi4+0x2c6>
 8000be4:	1a84      	subs	r4, r0, r2
 8000be6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bea:	2001      	movs	r0, #1
 8000bec:	469e      	mov	lr, r3
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d0e0      	beq.n	8000bb4 <__udivmoddi4+0xa4>
 8000bf2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bf6:	e7dd      	b.n	8000bb4 <__udivmoddi4+0xa4>
 8000bf8:	b902      	cbnz	r2, 8000bfc <__udivmoddi4+0xec>
 8000bfa:	deff      	udf	#255	; 0xff
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	2a00      	cmp	r2, #0
 8000c02:	f040 8092 	bne.w	8000d2a <__udivmoddi4+0x21a>
 8000c06:	eba1 010c 	sub.w	r1, r1, ip
 8000c0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0e:	fa1f fe8c 	uxth.w	lr, ip
 8000c12:	2601      	movs	r6, #1
 8000c14:	0c20      	lsrs	r0, r4, #16
 8000c16:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c1a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c22:	fb0e f003 	mul.w	r0, lr, r3
 8000c26:	4288      	cmp	r0, r1
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x12c>
 8000c2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x12a>
 8000c34:	4288      	cmp	r0, r1
 8000c36:	f200 80cb 	bhi.w	8000dd0 <__udivmoddi4+0x2c0>
 8000c3a:	4643      	mov	r3, r8
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c44:	fb07 1110 	mls	r1, r7, r0, r1
 8000c48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x156>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5c:	d202      	bcs.n	8000c64 <__udivmoddi4+0x154>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f200 80bb 	bhi.w	8000dda <__udivmoddi4+0x2ca>
 8000c64:	4608      	mov	r0, r1
 8000c66:	eba4 040e 	sub.w	r4, r4, lr
 8000c6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c6e:	e79c      	b.n	8000baa <__udivmoddi4+0x9a>
 8000c70:	f1c6 0720 	rsb	r7, r6, #32
 8000c74:	40b3      	lsls	r3, r6
 8000c76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7e:	fa20 f407 	lsr.w	r4, r0, r7
 8000c82:	fa01 f306 	lsl.w	r3, r1, r6
 8000c86:	431c      	orrs	r4, r3
 8000c88:	40f9      	lsrs	r1, r7
 8000c8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c8e:	fa00 f306 	lsl.w	r3, r0, r6
 8000c92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c96:	0c20      	lsrs	r0, r4, #16
 8000c98:	fa1f fe8c 	uxth.w	lr, ip
 8000c9c:	fb09 1118 	mls	r1, r9, r8, r1
 8000ca0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca4:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	fa02 f206 	lsl.w	r2, r2, r6
 8000cae:	d90b      	bls.n	8000cc8 <__udivmoddi4+0x1b8>
 8000cb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cb8:	f080 8088 	bcs.w	8000dcc <__udivmoddi4+0x2bc>
 8000cbc:	4288      	cmp	r0, r1
 8000cbe:	f240 8085 	bls.w	8000dcc <__udivmoddi4+0x2bc>
 8000cc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc6:	4461      	add	r1, ip
 8000cc8:	1a09      	subs	r1, r1, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cd0:	fb09 1110 	mls	r1, r9, r0, r1
 8000cd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	458e      	cmp	lr, r1
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x1e2>
 8000ce0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce8:	d26c      	bcs.n	8000dc4 <__udivmoddi4+0x2b4>
 8000cea:	458e      	cmp	lr, r1
 8000cec:	d96a      	bls.n	8000dc4 <__udivmoddi4+0x2b4>
 8000cee:	3802      	subs	r0, #2
 8000cf0:	4461      	add	r1, ip
 8000cf2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf6:	fba0 9402 	umull	r9, r4, r0, r2
 8000cfa:	eba1 010e 	sub.w	r1, r1, lr
 8000cfe:	42a1      	cmp	r1, r4
 8000d00:	46c8      	mov	r8, r9
 8000d02:	46a6      	mov	lr, r4
 8000d04:	d356      	bcc.n	8000db4 <__udivmoddi4+0x2a4>
 8000d06:	d053      	beq.n	8000db0 <__udivmoddi4+0x2a0>
 8000d08:	b15d      	cbz	r5, 8000d22 <__udivmoddi4+0x212>
 8000d0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d12:	fa01 f707 	lsl.w	r7, r1, r7
 8000d16:	fa22 f306 	lsr.w	r3, r2, r6
 8000d1a:	40f1      	lsrs	r1, r6
 8000d1c:	431f      	orrs	r7, r3
 8000d1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d22:	2600      	movs	r6, #0
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	f1c2 0320 	rsb	r3, r2, #32
 8000d2e:	40d8      	lsrs	r0, r3
 8000d30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d34:	fa21 f303 	lsr.w	r3, r1, r3
 8000d38:	4091      	lsls	r1, r2
 8000d3a:	4301      	orrs	r1, r0
 8000d3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d40:	fa1f fe8c 	uxth.w	lr, ip
 8000d44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d48:	fb07 3610 	mls	r6, r7, r0, r3
 8000d4c:	0c0b      	lsrs	r3, r1, #16
 8000d4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d52:	fb00 f60e 	mul.w	r6, r0, lr
 8000d56:	429e      	cmp	r6, r3
 8000d58:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x260>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d66:	d22f      	bcs.n	8000dc8 <__udivmoddi4+0x2b8>
 8000d68:	429e      	cmp	r6, r3
 8000d6a:	d92d      	bls.n	8000dc8 <__udivmoddi4+0x2b8>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	4463      	add	r3, ip
 8000d70:	1b9b      	subs	r3, r3, r6
 8000d72:	b289      	uxth	r1, r1
 8000d74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d78:	fb07 3316 	mls	r3, r7, r6, r3
 8000d7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d80:	fb06 f30e 	mul.w	r3, r6, lr
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x28a>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d90:	d216      	bcs.n	8000dc0 <__udivmoddi4+0x2b0>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d914      	bls.n	8000dc0 <__udivmoddi4+0x2b0>
 8000d96:	3e02      	subs	r6, #2
 8000d98:	4461      	add	r1, ip
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000da0:	e738      	b.n	8000c14 <__udivmoddi4+0x104>
 8000da2:	462e      	mov	r6, r5
 8000da4:	4628      	mov	r0, r5
 8000da6:	e705      	b.n	8000bb4 <__udivmoddi4+0xa4>
 8000da8:	4606      	mov	r6, r0
 8000daa:	e6e3      	b.n	8000b74 <__udivmoddi4+0x64>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6f8      	b.n	8000ba2 <__udivmoddi4+0x92>
 8000db0:	454b      	cmp	r3, r9
 8000db2:	d2a9      	bcs.n	8000d08 <__udivmoddi4+0x1f8>
 8000db4:	ebb9 0802 	subs.w	r8, r9, r2
 8000db8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7a3      	b.n	8000d08 <__udivmoddi4+0x1f8>
 8000dc0:	4646      	mov	r6, r8
 8000dc2:	e7ea      	b.n	8000d9a <__udivmoddi4+0x28a>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	e794      	b.n	8000cf2 <__udivmoddi4+0x1e2>
 8000dc8:	4640      	mov	r0, r8
 8000dca:	e7d1      	b.n	8000d70 <__udivmoddi4+0x260>
 8000dcc:	46d0      	mov	r8, sl
 8000dce:	e77b      	b.n	8000cc8 <__udivmoddi4+0x1b8>
 8000dd0:	3b02      	subs	r3, #2
 8000dd2:	4461      	add	r1, ip
 8000dd4:	e732      	b.n	8000c3c <__udivmoddi4+0x12c>
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	e709      	b.n	8000bee <__udivmoddi4+0xde>
 8000dda:	4464      	add	r4, ip
 8000ddc:	3802      	subs	r0, #2
 8000dde:	e742      	b.n	8000c66 <__udivmoddi4+0x156>

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dea:	f000 faf5 	bl	80013d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dee:	f000 f829 	bl	8000e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df2:	f000 f883 	bl	8000efc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
 SEVEN_SEG_Init(GPIOA,GPIO_PIN_0);
 8000df6:	2101      	movs	r1, #1
 8000df8:	4811      	ldr	r0, [pc, #68]	; (8000e40 <main+0x5c>)
 8000dfa:	f000 f8ad 	bl	8000f58 <SEVEN_SEG_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i = 0;i<11;i++){
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	e019      	b.n	8000e38 <main+0x54>
		  if(i%2==0)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d107      	bne.n	8000e1e <main+0x3a>
			  sevenSegSingleWrite( GPIOA,  i, DOT_ACTIVE);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2201      	movs	r2, #1
 8000e14:	4619      	mov	r1, r3
 8000e16:	480a      	ldr	r0, [pc, #40]	; (8000e40 <main+0x5c>)
 8000e18:	f000 f9e2 	bl	80011e0 <sevenSegSingleWrite>
 8000e1c:	e006      	b.n	8000e2c <main+0x48>
		  else
			  sevenSegSingleWrite( GPIOA,  i, DOT_DEACTIVE);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2200      	movs	r2, #0
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <main+0x5c>)
 8000e28:	f000 f9da 	bl	80011e0 <sevenSegSingleWrite>
		  HAL_Delay(250);
 8000e2c:	20fa      	movs	r0, #250	; 0xfa
 8000e2e:	f000 fb45 	bl	80014bc <HAL_Delay>
	  for(int i = 0;i<11;i++){
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3301      	adds	r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b0a      	cmp	r3, #10
 8000e3c:	dde2      	ble.n	8000e04 <main+0x20>
 8000e3e:	e7de      	b.n	8000dfe <main+0x1a>
 8000e40:	40020000 	.word	0x40020000

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b094      	sub	sp, #80	; 0x50
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0320 	add.w	r3, r7, #32
 8000e4e:	2230      	movs	r2, #48	; 0x30
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 fa40 	bl	80022d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <SystemClock_Config+0xb0>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	4a20      	ldr	r2, [pc, #128]	; (8000ef4 <SystemClock_Config+0xb0>)
 8000e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e76:	6413      	str	r3, [r2, #64]	; 0x40
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <SystemClock_Config+0xb0>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <SystemClock_Config+0xb4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1a      	ldr	r2, [pc, #104]	; (8000ef8 <SystemClock_Config+0xb4>)
 8000e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <SystemClock_Config+0xb4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fdc2 	bl	8001a3c <HAL_RCC_OscConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ebe:	f000 f845 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f001 f825 	bl	8001f2c <HAL_RCC_ClockConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000ee8:	f000 f830 	bl	8000f4c <Error_Handler>
  }
}
 8000eec:	bf00      	nop
 8000eee:	3750      	adds	r7, #80	; 0x50
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40007000 	.word	0x40007000

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_GPIO_Init+0x4c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <MX_GPIO_Init+0x4c>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <MX_GPIO_Init+0x4c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_GPIO_Init+0x4c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <MX_GPIO_Init+0x4c>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_GPIO_Init+0x4c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x8>
	...

08000f58 <SEVEN_SEG_Init>:
};



	
void SEVEN_SEG_Init(GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin){
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b092      	sub	sp, #72	; 0x48
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

  if(GPIOx == GPIOA)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a8e      	ldr	r2, [pc, #568]	; (80011b0 <SEVEN_SEG_Init+0x258>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d10d      	bne.n	8000f98 <SEVEN_SEG_Init+0x40>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f80:	4b8c      	ldr	r3, [pc, #560]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4a8b      	ldr	r2, [pc, #556]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8c:	4b89      	ldr	r3, [pc, #548]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
  if(GPIOx == GPIOB)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a87      	ldr	r2, [pc, #540]	; (80011b8 <SEVEN_SEG_Init+0x260>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d10d      	bne.n	8000fbc <SEVEN_SEG_Init+0x64>
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa4:	4b83      	ldr	r3, [pc, #524]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	4a82      	ldr	r2, [pc, #520]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb0:	4b80      	ldr	r3, [pc, #512]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  if(GPIOx == GPIOC)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a7f      	ldr	r2, [pc, #508]	; (80011bc <SEVEN_SEG_Init+0x264>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d10d      	bne.n	8000fe0 <SEVEN_SEG_Init+0x88>
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
 8000fc8:	4b7a      	ldr	r3, [pc, #488]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	4a79      	ldr	r2, [pc, #484]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd4:	4b77      	ldr	r3, [pc, #476]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	623b      	str	r3, [r7, #32]
 8000fde:	6a3b      	ldr	r3, [r7, #32]
  if(GPIOx == GPIOD)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a77      	ldr	r2, [pc, #476]	; (80011c0 <SEVEN_SEG_Init+0x268>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d10d      	bne.n	8001004 <SEVEN_SEG_Init+0xac>
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	4b71      	ldr	r3, [pc, #452]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	4a70      	ldr	r2, [pc, #448]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff8:	4b6e      	ldr	r3, [pc, #440]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	61fb      	str	r3, [r7, #28]
 8001002:	69fb      	ldr	r3, [r7, #28]
  if(GPIOx == GPIOE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a6f      	ldr	r2, [pc, #444]	; (80011c4 <SEVEN_SEG_Init+0x26c>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d10d      	bne.n	8001028 <SEVEN_SEG_Init+0xd0>
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
 8001010:	4b68      	ldr	r3, [pc, #416]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4a67      	ldr	r2, [pc, #412]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	6313      	str	r3, [r2, #48]	; 0x30
 800101c:	4b65      	ldr	r3, [pc, #404]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	f003 0310 	and.w	r3, r3, #16
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	69bb      	ldr	r3, [r7, #24]
  if(GPIOx == GPIOF)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a67      	ldr	r2, [pc, #412]	; (80011c8 <SEVEN_SEG_Init+0x270>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d10d      	bne.n	800104c <SEVEN_SEG_Init+0xf4>
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	4b5f      	ldr	r3, [pc, #380]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	4a5e      	ldr	r2, [pc, #376]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 800103a:	f043 0320 	orr.w	r3, r3, #32
 800103e:	6313      	str	r3, [r2, #48]	; 0x30
 8001040:	4b5c      	ldr	r3, [pc, #368]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	f003 0320 	and.w	r3, r3, #32
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
  if(GPIOx == GPIOG)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a5f      	ldr	r2, [pc, #380]	; (80011cc <SEVEN_SEG_Init+0x274>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d10d      	bne.n	8001070 <SEVEN_SEG_Init+0x118>
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	4a55      	ldr	r2, [pc, #340]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 800105e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001062:	6313      	str	r3, [r2, #48]	; 0x30
 8001064:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]
  if(GPIOx == GPIOH)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a57      	ldr	r2, [pc, #348]	; (80011d0 <SEVEN_SEG_Init+0x278>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d10d      	bne.n	8001094 <SEVEN_SEG_Init+0x13c>
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	4a4c      	ldr	r2, [pc, #304]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 8001082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001086:	6313      	str	r3, [r2, #48]	; 0x30
 8001088:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
  if(GPIOx == GPIOI)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a4f      	ldr	r2, [pc, #316]	; (80011d4 <SEVEN_SEG_Init+0x27c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d10d      	bne.n	80010b8 <SEVEN_SEG_Init+0x160>
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	4b44      	ldr	r3, [pc, #272]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	4a43      	ldr	r2, [pc, #268]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 80010a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010aa:	6313      	str	r3, [r2, #48]	; 0x30
 80010ac:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <SEVEN_SEG_Init+0x25c>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]

  /*Find GPIO_Pin number*/
  for(int i = 0; i < GPIO_Pin; i++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	647b      	str	r3, [r7, #68]	; 0x44
 80010bc:	e020      	b.n	8001100 <SEVEN_SEG_Init+0x1a8>
	  if( pow(2,i) == GPIO_Pin )
 80010be:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010c0:	f7ff f9d4 	bl	800046c <__aeabi_i2d>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	ec43 2b11 	vmov	d1, r2, r3
 80010cc:	ed9f 0b36 	vldr	d0, [pc, #216]	; 80011a8 <SEVEN_SEG_Init+0x250>
 80010d0:	f001 f90a 	bl	80022e8 <pow>
 80010d4:	ec55 4b10 	vmov	r4, r5, d0
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f9c6 	bl	800046c <__aeabi_i2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4620      	mov	r0, r4
 80010e6:	4629      	mov	r1, r5
 80010e8:	f7ff fc92 	bl	8000a10 <__aeabi_dcmpeq>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <SEVEN_SEG_Init+0x1a2>
	  {
		  pinNumb = i;
 80010f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <SEVEN_SEG_Init+0x280>)
 80010f8:	801a      	strh	r2, [r3, #0]
  for(int i = 0; i < GPIO_Pin; i++){
 80010fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010fc:	3301      	adds	r3, #1
 80010fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001100:	887b      	ldrh	r3, [r7, #2]
 8001102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001104:	429a      	cmp	r2, r3
 8001106:	dbda      	blt.n	80010be <SEVEN_SEG_Init+0x166>
	  }
  }
  pinNumbs = pinNumb;
 8001108:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <SEVEN_SEG_Init+0x280>)
 800110a:	881a      	ldrh	r2, [r3, #0]
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <SEVEN_SEG_Init+0x284>)
 800110e:	801a      	strh	r2, [r3, #0]
  /*Configure GPIO pin Output Level */
  for(int i= pinNumb; i < pinNumb+8; i++){
 8001110:	4b31      	ldr	r3, [pc, #196]	; (80011d8 <SEVEN_SEG_Init+0x280>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	643b      	str	r3, [r7, #64]	; 0x40
 8001116:	e030      	b.n	800117a <SEVEN_SEG_Init+0x222>
	  HAL_GPIO_WritePin(GPIOx, (uint16_t)(pow(2,i)) , GPIO_PIN_SET);
 8001118:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800111a:	f7ff f9a7 	bl	800046c <__aeabi_i2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	ec43 2b11 	vmov	d1, r2, r3
 8001126:	ed9f 0b20 	vldr	d0, [pc, #128]	; 80011a8 <SEVEN_SEG_Init+0x250>
 800112a:	f001 f8dd 	bl	80022e8 <pow>
 800112e:	ec53 2b10 	vmov	r2, r3, d0
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fcb3 	bl	8000aa0 <__aeabi_d2uiz>
 800113a:	4603      	mov	r3, r0
 800113c:	b29b      	uxth	r3, r3
 800113e:	2201      	movs	r2, #1
 8001140:	4619      	mov	r1, r3
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 fc60 	bl	8001a08 <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pin |= (uint16_t)(pow(2,i));
 8001148:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800114a:	f7ff f98f 	bl	800046c <__aeabi_i2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	ec43 2b11 	vmov	d1, r2, r3
 8001156:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80011a8 <SEVEN_SEG_Init+0x250>
 800115a:	f001 f8c5 	bl	80022e8 <pow>
 800115e:	ec53 2b10 	vmov	r2, r3, d0
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fc9b 	bl	8000aa0 <__aeabi_d2uiz>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001170:	4313      	orrs	r3, r2
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(int i= pinNumb; i < pinNumb+8; i++){
 8001174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001176:	3301      	adds	r3, #1
 8001178:	643b      	str	r3, [r7, #64]	; 0x40
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <SEVEN_SEG_Init+0x280>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	3307      	adds	r3, #7
 8001180:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001182:	429a      	cmp	r2, r3
 8001184:	ddc8      	ble.n	8001118 <SEVEN_SEG_Init+0x1c0>
  }
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <SEVEN_SEG_Init+0x258>)
 800119a:	f000 fa99 	bl	80016d0 <HAL_GPIO_Init>
}
 800119e:	bf00      	nop
 80011a0:	3748      	adds	r7, #72	; 0x48
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bdb0      	pop	{r4, r5, r7, pc}
 80011a6:	bf00      	nop
 80011a8:	00000000 	.word	0x00000000
 80011ac:	40000000 	.word	0x40000000
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40021400 	.word	0x40021400
 80011cc:	40021800 	.word	0x40021800
 80011d0:	40021c00 	.word	0x40021c00
 80011d4:	40022000 	.word	0x40022000
 80011d8:	20000098 	.word	0x20000098
 80011dc:	2000009a 	.word	0x2000009a

080011e0 <sevenSegSingleWrite>:

void sevenSegSingleWrite(GPIO_TypeDef* GPIOx, uint8_t number, uint8_t DOT_STATE){//DOT_STATE = DOT_DEACTIVE or DOT_ACTİVE
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
 80011ec:	4613      	mov	r3, r2
 80011ee:	70bb      	strb	r3, [r7, #2]

		  for(int k = 0; k<7;k++){
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e035      	b.n	8001262 <sevenSegSingleWrite+0x82>
			  if((numbs[number] & (1<<k)) > 0){
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <sevenSegSingleWrite+0xd0>)
 80011fa:	5cd3      	ldrb	r3, [r2, r3]
 80011fc:	4619      	mov	r1, r3
 80011fe:	2201      	movs	r2, #1
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	400b      	ands	r3, r1
 8001208:	2b00      	cmp	r3, #0
 800120a:	dd0e      	ble.n	800122a <sevenSegSingleWrite+0x4a>
				  GPIOx->ODR &= ~(1<<(pinNumb+k+1));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	4a28      	ldr	r2, [pc, #160]	; (80012b4 <sevenSegSingleWrite+0xd4>)
 8001212:	8812      	ldrh	r2, [r2, #0]
 8001214:	4611      	mov	r1, r2
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	440a      	add	r2, r1
 800121a:	3201      	adds	r2, #1
 800121c:	2101      	movs	r1, #1
 800121e:	fa01 f202 	lsl.w	r2, r1, r2
 8001222:	43d2      	mvns	r2, r2
 8001224:	401a      	ands	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	615a      	str	r2, [r3, #20]
			  }
			  if((numbs[number] & (1<<k)) == 0){
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <sevenSegSingleWrite+0xd0>)
 800122e:	5cd3      	ldrb	r3, [r2, r3]
 8001230:	461a      	mov	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	fa42 f303 	asr.w	r3, r2, r3
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10d      	bne.n	800125c <sevenSegSingleWrite+0x7c>
				  GPIOx->ODR |= (1<<(pinNumb+k+1));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <sevenSegSingleWrite+0xd4>)
 8001246:	8812      	ldrh	r2, [r2, #0]
 8001248:	4611      	mov	r1, r2
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	440a      	add	r2, r1
 800124e:	3201      	adds	r2, #1
 8001250:	2101      	movs	r1, #1
 8001252:	fa01 f202 	lsl.w	r2, r1, r2
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	615a      	str	r2, [r3, #20]
		  for(int k = 0; k<7;k++){
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b06      	cmp	r3, #6
 8001266:	ddc6      	ble.n	80011f6 <sevenSegSingleWrite+0x16>
			  }

		  }

		  if(DOT_STATE)
 8001268:	78bb      	ldrb	r3, [r7, #2]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00b      	beq.n	8001286 <sevenSegSingleWrite+0xa6>
			  GPIOx->ODR &= ~(1<<pinNumbs);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	4a11      	ldr	r2, [pc, #68]	; (80012b8 <sevenSegSingleWrite+0xd8>)
 8001274:	8812      	ldrh	r2, [r2, #0]
 8001276:	4611      	mov	r1, r2
 8001278:	2201      	movs	r2, #1
 800127a:	408a      	lsls	r2, r1
 800127c:	43d2      	mvns	r2, r2
 800127e:	401a      	ands	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	e009      	b.n	800129a <sevenSegSingleWrite+0xba>
		  else
			  GPIOx->ODR |= (1<<pinNumbs);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <sevenSegSingleWrite+0xd8>)
 800128c:	8812      	ldrh	r2, [r2, #0]
 800128e:	4611      	mov	r1, r2
 8001290:	2201      	movs	r2, #1
 8001292:	408a      	lsls	r2, r1
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	615a      	str	r2, [r3, #20]
		  pinNumb=pinNumbs;
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <sevenSegSingleWrite+0xd8>)
 800129c:	881a      	ldrh	r2, [r3, #0]
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <sevenSegSingleWrite+0xd4>)
 80012a0:	801a      	strh	r2, [r3, #0]
  }
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000098 	.word	0x20000098
 80012b8:	2000009a 	.word	0x2000009a

080012bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_MspInit+0x4c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <HAL_MspInit+0x4c>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_MspInit+0x4c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_MspInit+0x4c>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_MspInit+0x4c>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800

0800130c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <NMI_Handler+0x4>

08001312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <MemManage_Handler+0x4>

0800131e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler+0x4>

0800132a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001358:	f000 f890 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <SystemInit+0x20>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <SystemInit+0x20>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001384:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800138a:	490e      	ldr	r1, [pc, #56]	; (80013c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013a0:	4c0b      	ldr	r4, [pc, #44]	; (80013d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ae:	f7ff ffd7 	bl	8001360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013b2:	f000 ff6d 	bl	8002290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b6:	f7ff fd15 	bl	8000de4 <main>
  bx  lr    
 80013ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80013c8:	08003188 	.word	0x08003188
  ldr r2, =_sbss
 80013cc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80013d0:	200000a0 	.word	0x200000a0

080013d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC_IRQHandler>
	...

080013d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_Init+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <HAL_Init+0x40>)
 80013e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_Init+0x40>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_Init+0x40>)
 80013ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_Init+0x40>)
 80013fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 f931 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001406:	200f      	movs	r0, #15
 8001408:	f000 f808 	bl	800141c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800140c:	f7ff ff56 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023c00 	.word	0x40023c00

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_InitTick+0x54>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x58>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	fbb3 f3f1 	udiv	r3, r3, r1
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f93b 	bl	80016b6 <HAL_SYSTICK_Config>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00e      	b.n	8001468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d80a      	bhi.n	8001466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f000 f911 	bl	800167e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <HAL_InitTick+0x5c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000000c 	.word	0x2000000c
 8001474:	20000014 	.word	0x20000014
 8001478:	20000010 	.word	0x20000010

0800147c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x20>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x24>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_IncTick+0x24>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000014 	.word	0x20000014
 80014a0:	2000009c 	.word	0x2000009c

080014a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_GetTick+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	2000009c 	.word	0x2000009c

080014bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff ffee 	bl	80014a4 <HAL_GetTick>
 80014c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d4:	d005      	beq.n	80014e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_Delay+0x44>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014e2:	bf00      	nop
 80014e4:	f7ff ffde 	bl	80014a4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d8f7      	bhi.n	80014e4 <HAL_Delay+0x28>
  {
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000014 	.word	0x20000014

08001504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001520:	4013      	ands	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800152c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <__NVIC_GetPriorityGrouping+0x18>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	f003 0307 	and.w	r3, r3, #7
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db0a      	blt.n	8001592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	490c      	ldr	r1, [pc, #48]	; (80015b4 <__NVIC_SetPriority+0x4c>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	0112      	lsls	r2, r2, #4
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	440b      	add	r3, r1
 800158c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001590:	e00a      	b.n	80015a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4908      	ldr	r1, [pc, #32]	; (80015b8 <__NVIC_SetPriority+0x50>)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	3b04      	subs	r3, #4
 80015a0:	0112      	lsls	r2, r2, #4
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	440b      	add	r3, r1
 80015a6:	761a      	strb	r2, [r3, #24]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000e100 	.word	0xe000e100
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f1c3 0307 	rsb	r3, r3, #7
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	bf28      	it	cs
 80015da:	2304      	movcs	r3, #4
 80015dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3304      	adds	r3, #4
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d902      	bls.n	80015ec <NVIC_EncodePriority+0x30>
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3b03      	subs	r3, #3
 80015ea:	e000      	b.n	80015ee <NVIC_EncodePriority+0x32>
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	f04f 32ff 	mov.w	r2, #4294967295
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	401a      	ands	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001604:	f04f 31ff 	mov.w	r1, #4294967295
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43d9      	mvns	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	4313      	orrs	r3, r2
         );
}
 8001616:	4618      	mov	r0, r3
 8001618:	3724      	adds	r7, #36	; 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001634:	d301      	bcc.n	800163a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001636:	2301      	movs	r3, #1
 8001638:	e00f      	b.n	800165a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <SysTick_Config+0x40>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001642:	210f      	movs	r1, #15
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f7ff ff8e 	bl	8001568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <SysTick_Config+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <SysTick_Config+0x40>)
 8001654:	2207      	movs	r2, #7
 8001656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000e010 	.word	0xe000e010

08001668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff47 	bl	8001504 <__NVIC_SetPriorityGrouping>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001690:	f7ff ff5c 	bl	800154c <__NVIC_GetPriorityGrouping>
 8001694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7ff ff8e 	bl	80015bc <NVIC_EncodePriority>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff5d 	bl	8001568 <__NVIC_SetPriority>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffb0 	bl	8001624 <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	e16b      	b.n	80019c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016ec:	2201      	movs	r2, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	429a      	cmp	r2, r3
 8001706:	f040 815a 	bne.w	80019be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b01      	cmp	r3, #1
 8001714:	d005      	beq.n	8001722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171e:	2b02      	cmp	r3, #2
 8001720:	d130      	bne.n	8001784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001758:	2201      	movs	r2, #1
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 0201 	and.w	r2, r3, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b03      	cmp	r3, #3
 800178e:	d017      	beq.n	80017c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d123      	bne.n	8001814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	08da      	lsrs	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3208      	adds	r2, #8
 80017d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	220f      	movs	r2, #15
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	08da      	lsrs	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3208      	adds	r2, #8
 800180e:	69b9      	ldr	r1, [r7, #24]
 8001810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0203 	and.w	r2, r3, #3
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80b4 	beq.w	80019be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b60      	ldr	r3, [pc, #384]	; (80019dc <HAL_GPIO_Init+0x30c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a5f      	ldr	r2, [pc, #380]	; (80019dc <HAL_GPIO_Init+0x30c>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b5d      	ldr	r3, [pc, #372]	; (80019dc <HAL_GPIO_Init+0x30c>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001872:	4a5b      	ldr	r2, [pc, #364]	; (80019e0 <HAL_GPIO_Init+0x310>)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	220f      	movs	r2, #15
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a52      	ldr	r2, [pc, #328]	; (80019e4 <HAL_GPIO_Init+0x314>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d02b      	beq.n	80018f6 <HAL_GPIO_Init+0x226>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a51      	ldr	r2, [pc, #324]	; (80019e8 <HAL_GPIO_Init+0x318>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d025      	beq.n	80018f2 <HAL_GPIO_Init+0x222>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a50      	ldr	r2, [pc, #320]	; (80019ec <HAL_GPIO_Init+0x31c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d01f      	beq.n	80018ee <HAL_GPIO_Init+0x21e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4f      	ldr	r2, [pc, #316]	; (80019f0 <HAL_GPIO_Init+0x320>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d019      	beq.n	80018ea <HAL_GPIO_Init+0x21a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4e      	ldr	r2, [pc, #312]	; (80019f4 <HAL_GPIO_Init+0x324>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d013      	beq.n	80018e6 <HAL_GPIO_Init+0x216>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4d      	ldr	r2, [pc, #308]	; (80019f8 <HAL_GPIO_Init+0x328>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00d      	beq.n	80018e2 <HAL_GPIO_Init+0x212>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a4c      	ldr	r2, [pc, #304]	; (80019fc <HAL_GPIO_Init+0x32c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d007      	beq.n	80018de <HAL_GPIO_Init+0x20e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a4b      	ldr	r2, [pc, #300]	; (8001a00 <HAL_GPIO_Init+0x330>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d101      	bne.n	80018da <HAL_GPIO_Init+0x20a>
 80018d6:	2307      	movs	r3, #7
 80018d8:	e00e      	b.n	80018f8 <HAL_GPIO_Init+0x228>
 80018da:	2308      	movs	r3, #8
 80018dc:	e00c      	b.n	80018f8 <HAL_GPIO_Init+0x228>
 80018de:	2306      	movs	r3, #6
 80018e0:	e00a      	b.n	80018f8 <HAL_GPIO_Init+0x228>
 80018e2:	2305      	movs	r3, #5
 80018e4:	e008      	b.n	80018f8 <HAL_GPIO_Init+0x228>
 80018e6:	2304      	movs	r3, #4
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x228>
 80018ea:	2303      	movs	r3, #3
 80018ec:	e004      	b.n	80018f8 <HAL_GPIO_Init+0x228>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_Init+0x228>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_GPIO_Init+0x228>
 80018f6:	2300      	movs	r3, #0
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	f002 0203 	and.w	r2, r2, #3
 80018fe:	0092      	lsls	r2, r2, #2
 8001900:	4093      	lsls	r3, r2
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001908:	4935      	ldr	r1, [pc, #212]	; (80019e0 <HAL_GPIO_Init+0x310>)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001916:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HAL_GPIO_Init+0x334>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800193a:	4a32      	ldr	r2, [pc, #200]	; (8001a04 <HAL_GPIO_Init+0x334>)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001940:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_GPIO_Init+0x334>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001964:	4a27      	ldr	r2, [pc, #156]	; (8001a04 <HAL_GPIO_Init+0x334>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_GPIO_Init+0x334>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800198e:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <HAL_GPIO_Init+0x334>)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_GPIO_Init+0x334>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019b8:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <HAL_GPIO_Init+0x334>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3301      	adds	r3, #1
 80019c2:	61fb      	str	r3, [r7, #28]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	2b0f      	cmp	r3, #15
 80019c8:	f67f ae90 	bls.w	80016ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40013800 	.word	0x40013800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	40020400 	.word	0x40020400
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020c00 	.word	0x40020c00
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40021400 	.word	0x40021400
 80019fc:	40021800 	.word	0x40021800
 8001a00:	40021c00 	.word	0x40021c00
 8001a04:	40013c00 	.word	0x40013c00

08001a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
 8001a14:	4613      	mov	r3, r2
 8001a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a18:	787b      	ldrb	r3, [r7, #1]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1e:	887a      	ldrh	r2, [r7, #2]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a24:	e003      	b.n	8001a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	041a      	lsls	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	619a      	str	r2, [r3, #24]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e267      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d075      	beq.n	8001b46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a5a:	4b88      	ldr	r3, [pc, #544]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d00c      	beq.n	8001a80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a66:	4b85      	ldr	r3, [pc, #532]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d112      	bne.n	8001a98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a72:	4b82      	ldr	r3, [pc, #520]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a7e:	d10b      	bne.n	8001a98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	4b7e      	ldr	r3, [pc, #504]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d05b      	beq.n	8001b44 <HAL_RCC_OscConfig+0x108>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d157      	bne.n	8001b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e242      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa0:	d106      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x74>
 8001aa2:	4b76      	ldr	r3, [pc, #472]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a75      	ldr	r2, [pc, #468]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e01d      	b.n	8001aec <HAL_RCC_OscConfig+0xb0>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x98>
 8001aba:	4b70      	ldr	r3, [pc, #448]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a6f      	ldr	r2, [pc, #444]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b6d      	ldr	r3, [pc, #436]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a6c      	ldr	r2, [pc, #432]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0xb0>
 8001ad4:	4b69      	ldr	r3, [pc, #420]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a68      	ldr	r2, [pc, #416]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b66      	ldr	r3, [pc, #408]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a65      	ldr	r2, [pc, #404]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fcd6 	bl	80014a4 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff fcd2 	bl	80014a4 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e207      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b5b      	ldr	r3, [pc, #364]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0xc0>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fcc2 	bl	80014a4 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff fcbe 	bl	80014a4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1f3      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	4b51      	ldr	r3, [pc, #324]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0xe8>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d063      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b52:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5e:	4b47      	ldr	r3, [pc, #284]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d11c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b6a:	4b44      	ldr	r3, [pc, #272]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d116      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <HAL_RCC_OscConfig+0x152>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e1c7      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4937      	ldr	r1, [pc, #220]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	e03a      	b.n	8001c1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bac:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <HAL_RCC_OscConfig+0x244>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fc77 	bl	80014a4 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff fc73 	bl	80014a4 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e1a8      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4925      	ldr	r1, [pc, #148]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e015      	b.n	8001c1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_RCC_OscConfig+0x244>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fc56 	bl	80014a4 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fc52 	bl	80014a4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e187      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d036      	beq.n	8001c94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d016      	beq.n	8001c5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_RCC_OscConfig+0x248>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff fc36 	bl	80014a4 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fc32 	bl	80014a4 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e167      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x200>
 8001c5a:	e01b      	b.n	8001c94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_OscConfig+0x248>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fc1f 	bl	80014a4 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	e00e      	b.n	8001c88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fc1b 	bl	80014a4 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d907      	bls.n	8001c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e150      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	42470000 	.word	0x42470000
 8001c84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	4b88      	ldr	r3, [pc, #544]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ea      	bne.n	8001c6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8097 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca6:	4b81      	ldr	r3, [pc, #516]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10f      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	4b7d      	ldr	r3, [pc, #500]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a7c      	ldr	r2, [pc, #496]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc2:	4b7a      	ldr	r3, [pc, #488]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	4b77      	ldr	r3, [pc, #476]	; (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d118      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cde:	4b74      	ldr	r3, [pc, #464]	; (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a73      	ldr	r2, [pc, #460]	; (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cea:	f7ff fbdb 	bl	80014a4 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf2:	f7ff fbd7 	bl	80014a4 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e10c      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2ea>
 8001d18:	4b64      	ldr	r3, [pc, #400]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	4a63      	ldr	r2, [pc, #396]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6713      	str	r3, [r2, #112]	; 0x70
 8001d24:	e01c      	b.n	8001d60 <HAL_RCC_OscConfig+0x324>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b05      	cmp	r3, #5
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x30c>
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d32:	4a5e      	ldr	r2, [pc, #376]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3a:	4b5c      	ldr	r3, [pc, #368]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a5b      	ldr	r2, [pc, #364]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0x324>
 8001d48:	4b58      	ldr	r3, [pc, #352]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	4a57      	ldr	r2, [pc, #348]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d4e:	f023 0301 	bic.w	r3, r3, #1
 8001d52:	6713      	str	r3, [r2, #112]	; 0x70
 8001d54:	4b55      	ldr	r3, [pc, #340]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d58:	4a54      	ldr	r2, [pc, #336]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d5a:	f023 0304 	bic.w	r3, r3, #4
 8001d5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d015      	beq.n	8001d94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff fb9c 	bl	80014a4 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff fb98 	bl	80014a4 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0cb      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d86:	4b49      	ldr	r3, [pc, #292]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0ee      	beq.n	8001d70 <HAL_RCC_OscConfig+0x334>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d94:	f7ff fb86 	bl	80014a4 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fb82 	bl	80014a4 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e0b5      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db2:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ee      	bne.n	8001d9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a38      	ldr	r2, [pc, #224]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80a1 	beq.w	8001f1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dda:	4b34      	ldr	r3, [pc, #208]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d05c      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d141      	bne.n	8001e72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_RCC_OscConfig+0x478>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fb56 	bl	80014a4 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff fb52 	bl	80014a4 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e087      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	4b27      	ldr	r3, [pc, #156]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	019b      	lsls	r3, r3, #6
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	3b01      	subs	r3, #1
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	491b      	ldr	r1, [pc, #108]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_RCC_OscConfig+0x478>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fb2b 	bl	80014a4 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff fb27 	bl	80014a4 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e05c      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x416>
 8001e70:	e054      	b.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_RCC_OscConfig+0x478>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff fb14 	bl	80014a4 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff fb10 	bl	80014a4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e045      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x444>
 8001e9e:	e03d      	b.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e038      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_RCC_OscConfig+0x4ec>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d028      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d121      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d11a      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ee8:	4013      	ands	r3, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d111      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	085b      	lsrs	r3, r3, #1
 8001f00:	3b01      	subs	r3, #1
 8001f02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0cc      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f40:	4b68      	ldr	r3, [pc, #416]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d90c      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b65      	ldr	r3, [pc, #404]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b63      	ldr	r3, [pc, #396]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0b8      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f80:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a58      	ldr	r2, [pc, #352]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f98:	4b53      	ldr	r3, [pc, #332]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a52      	ldr	r2, [pc, #328]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	494d      	ldr	r1, [pc, #308]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d044      	beq.n	800204c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d119      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e07f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fea:	4b3f      	ldr	r3, [pc, #252]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e06f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e067      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200a:	4b37      	ldr	r3, [pc, #220]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 0203 	bic.w	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4934      	ldr	r1, [pc, #208]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800201c:	f7ff fa42 	bl	80014a4 <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	e00a      	b.n	800203a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002024:	f7ff fa3e 	bl	80014a4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e04f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 020c 	and.w	r2, r3, #12
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	429a      	cmp	r2, r3
 800204a:	d1eb      	bne.n	8002024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d20c      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e032      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4916      	ldr	r1, [pc, #88]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	490e      	ldr	r1, [pc, #56]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020b2:	f000 f821 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 80020b6:	4602      	mov	r2, r0
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	490a      	ldr	r1, [pc, #40]	; (80020ec <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	5ccb      	ldrb	r3, [r1, r3]
 80020c6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ca:	4a09      	ldr	r2, [pc, #36]	; (80020f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f9a2 	bl	800141c <HAL_InitTick>

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023c00 	.word	0x40023c00
 80020e8:	40023800 	.word	0x40023800
 80020ec:	08003138 	.word	0x08003138
 80020f0:	2000000c 	.word	0x2000000c
 80020f4:	20000010 	.word	0x20000010

080020f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020fc:	b090      	sub	sp, #64	; 0x40
 80020fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
 8002104:	2300      	movs	r3, #0
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002108:	2300      	movs	r3, #0
 800210a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b08      	cmp	r3, #8
 800211a:	d00d      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x40>
 800211c:	2b08      	cmp	r3, #8
 800211e:	f200 80a1 	bhi.w	8002264 <HAL_RCC_GetSysClockFreq+0x16c>
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x34>
 8002126:	2b04      	cmp	r3, #4
 8002128:	d003      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x3a>
 800212a:	e09b      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_GetSysClockFreq+0x184>)
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002130:	e09b      	b.n	800226a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002132:	4b53      	ldr	r3, [pc, #332]	; (8002280 <HAL_RCC_GetSysClockFreq+0x188>)
 8002134:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002136:	e098      	b.n	800226a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002138:	4b4f      	ldr	r3, [pc, #316]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002140:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002142:	4b4d      	ldr	r3, [pc, #308]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d028      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214e:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	099b      	lsrs	r3, r3, #6
 8002154:	2200      	movs	r2, #0
 8002156:	623b      	str	r3, [r7, #32]
 8002158:	627a      	str	r2, [r7, #36]	; 0x24
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002160:	2100      	movs	r1, #0
 8002162:	4b47      	ldr	r3, [pc, #284]	; (8002280 <HAL_RCC_GetSysClockFreq+0x188>)
 8002164:	fb03 f201 	mul.w	r2, r3, r1
 8002168:	2300      	movs	r3, #0
 800216a:	fb00 f303 	mul.w	r3, r0, r3
 800216e:	4413      	add	r3, r2
 8002170:	4a43      	ldr	r2, [pc, #268]	; (8002280 <HAL_RCC_GetSysClockFreq+0x188>)
 8002172:	fba0 1202 	umull	r1, r2, r0, r2
 8002176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002178:	460a      	mov	r2, r1
 800217a:	62ba      	str	r2, [r7, #40]	; 0x28
 800217c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800217e:	4413      	add	r3, r2
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002184:	2200      	movs	r2, #0
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	61fa      	str	r2, [r7, #28]
 800218a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800218e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002192:	f7fe fca5 	bl	8000ae0 <__aeabi_uldivmod>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4613      	mov	r3, r2
 800219c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800219e:	e053      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a0:	4b35      	ldr	r3, [pc, #212]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	099b      	lsrs	r3, r3, #6
 80021a6:	2200      	movs	r2, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	617a      	str	r2, [r7, #20]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021b2:	f04f 0b00 	mov.w	fp, #0
 80021b6:	4652      	mov	r2, sl
 80021b8:	465b      	mov	r3, fp
 80021ba:	f04f 0000 	mov.w	r0, #0
 80021be:	f04f 0100 	mov.w	r1, #0
 80021c2:	0159      	lsls	r1, r3, #5
 80021c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c8:	0150      	lsls	r0, r2, #5
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	ebb2 080a 	subs.w	r8, r2, sl
 80021d2:	eb63 090b 	sbc.w	r9, r3, fp
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021ea:	ebb2 0408 	subs.w	r4, r2, r8
 80021ee:	eb63 0509 	sbc.w	r5, r3, r9
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	00eb      	lsls	r3, r5, #3
 80021fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002200:	00e2      	lsls	r2, r4, #3
 8002202:	4614      	mov	r4, r2
 8002204:	461d      	mov	r5, r3
 8002206:	eb14 030a 	adds.w	r3, r4, sl
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	eb45 030b 	adc.w	r3, r5, fp
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800221e:	4629      	mov	r1, r5
 8002220:	028b      	lsls	r3, r1, #10
 8002222:	4621      	mov	r1, r4
 8002224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002228:	4621      	mov	r1, r4
 800222a:	028a      	lsls	r2, r1, #10
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002232:	2200      	movs	r2, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	60fa      	str	r2, [r7, #12]
 8002238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800223c:	f7fe fc50 	bl	8000ae0 <__aeabi_uldivmod>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4613      	mov	r3, r2
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	3301      	adds	r3, #1
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002262:	e002      	b.n	800226a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_RCC_GetSysClockFreq+0x184>)
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800226a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800226c:	4618      	mov	r0, r3
 800226e:	3740      	adds	r7, #64	; 0x40
 8002270:	46bd      	mov	sp, r7
 8002272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	00f42400 	.word	0x00f42400
 8002280:	017d7840 	.word	0x017d7840

08002284 <__errno>:
 8002284:	4b01      	ldr	r3, [pc, #4]	; (800228c <__errno+0x8>)
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000018 	.word	0x20000018

08002290 <__libc_init_array>:
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	4d0d      	ldr	r5, [pc, #52]	; (80022c8 <__libc_init_array+0x38>)
 8002294:	4c0d      	ldr	r4, [pc, #52]	; (80022cc <__libc_init_array+0x3c>)
 8002296:	1b64      	subs	r4, r4, r5
 8002298:	10a4      	asrs	r4, r4, #2
 800229a:	2600      	movs	r6, #0
 800229c:	42a6      	cmp	r6, r4
 800229e:	d109      	bne.n	80022b4 <__libc_init_array+0x24>
 80022a0:	4d0b      	ldr	r5, [pc, #44]	; (80022d0 <__libc_init_array+0x40>)
 80022a2:	4c0c      	ldr	r4, [pc, #48]	; (80022d4 <__libc_init_array+0x44>)
 80022a4:	f000 ff3a 	bl	800311c <_init>
 80022a8:	1b64      	subs	r4, r4, r5
 80022aa:	10a4      	asrs	r4, r4, #2
 80022ac:	2600      	movs	r6, #0
 80022ae:	42a6      	cmp	r6, r4
 80022b0:	d105      	bne.n	80022be <__libc_init_array+0x2e>
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
 80022b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b8:	4798      	blx	r3
 80022ba:	3601      	adds	r6, #1
 80022bc:	e7ee      	b.n	800229c <__libc_init_array+0xc>
 80022be:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c2:	4798      	blx	r3
 80022c4:	3601      	adds	r6, #1
 80022c6:	e7f2      	b.n	80022ae <__libc_init_array+0x1e>
 80022c8:	08003180 	.word	0x08003180
 80022cc:	08003180 	.word	0x08003180
 80022d0:	08003180 	.word	0x08003180
 80022d4:	08003184 	.word	0x08003184

080022d8 <memset>:
 80022d8:	4402      	add	r2, r0
 80022da:	4603      	mov	r3, r0
 80022dc:	4293      	cmp	r3, r2
 80022de:	d100      	bne.n	80022e2 <memset+0xa>
 80022e0:	4770      	bx	lr
 80022e2:	f803 1b01 	strb.w	r1, [r3], #1
 80022e6:	e7f9      	b.n	80022dc <memset+0x4>

080022e8 <pow>:
 80022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ea:	ed2d 8b02 	vpush	{d8}
 80022ee:	eeb0 8a40 	vmov.f32	s16, s0
 80022f2:	eef0 8a60 	vmov.f32	s17, s1
 80022f6:	ec55 4b11 	vmov	r4, r5, d1
 80022fa:	f000 f865 	bl	80023c8 <__ieee754_pow>
 80022fe:	4622      	mov	r2, r4
 8002300:	462b      	mov	r3, r5
 8002302:	4620      	mov	r0, r4
 8002304:	4629      	mov	r1, r5
 8002306:	ec57 6b10 	vmov	r6, r7, d0
 800230a:	f7fe fbb3 	bl	8000a74 <__aeabi_dcmpun>
 800230e:	2800      	cmp	r0, #0
 8002310:	d13b      	bne.n	800238a <pow+0xa2>
 8002312:	ec51 0b18 	vmov	r0, r1, d8
 8002316:	2200      	movs	r2, #0
 8002318:	2300      	movs	r3, #0
 800231a:	f7fe fb79 	bl	8000a10 <__aeabi_dcmpeq>
 800231e:	b1b8      	cbz	r0, 8002350 <pow+0x68>
 8002320:	2200      	movs	r2, #0
 8002322:	2300      	movs	r3, #0
 8002324:	4620      	mov	r0, r4
 8002326:	4629      	mov	r1, r5
 8002328:	f7fe fb72 	bl	8000a10 <__aeabi_dcmpeq>
 800232c:	2800      	cmp	r0, #0
 800232e:	d146      	bne.n	80023be <pow+0xd6>
 8002330:	ec45 4b10 	vmov	d0, r4, r5
 8002334:	f000 fe61 	bl	8002ffa <finite>
 8002338:	b338      	cbz	r0, 800238a <pow+0xa2>
 800233a:	2200      	movs	r2, #0
 800233c:	2300      	movs	r3, #0
 800233e:	4620      	mov	r0, r4
 8002340:	4629      	mov	r1, r5
 8002342:	f7fe fb6f 	bl	8000a24 <__aeabi_dcmplt>
 8002346:	b300      	cbz	r0, 800238a <pow+0xa2>
 8002348:	f7ff ff9c 	bl	8002284 <__errno>
 800234c:	2322      	movs	r3, #34	; 0x22
 800234e:	e01b      	b.n	8002388 <pow+0xa0>
 8002350:	ec47 6b10 	vmov	d0, r6, r7
 8002354:	f000 fe51 	bl	8002ffa <finite>
 8002358:	b9e0      	cbnz	r0, 8002394 <pow+0xac>
 800235a:	eeb0 0a48 	vmov.f32	s0, s16
 800235e:	eef0 0a68 	vmov.f32	s1, s17
 8002362:	f000 fe4a 	bl	8002ffa <finite>
 8002366:	b1a8      	cbz	r0, 8002394 <pow+0xac>
 8002368:	ec45 4b10 	vmov	d0, r4, r5
 800236c:	f000 fe45 	bl	8002ffa <finite>
 8002370:	b180      	cbz	r0, 8002394 <pow+0xac>
 8002372:	4632      	mov	r2, r6
 8002374:	463b      	mov	r3, r7
 8002376:	4630      	mov	r0, r6
 8002378:	4639      	mov	r1, r7
 800237a:	f7fe fb7b 	bl	8000a74 <__aeabi_dcmpun>
 800237e:	2800      	cmp	r0, #0
 8002380:	d0e2      	beq.n	8002348 <pow+0x60>
 8002382:	f7ff ff7f 	bl	8002284 <__errno>
 8002386:	2321      	movs	r3, #33	; 0x21
 8002388:	6003      	str	r3, [r0, #0]
 800238a:	ecbd 8b02 	vpop	{d8}
 800238e:	ec47 6b10 	vmov	d0, r6, r7
 8002392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002394:	2200      	movs	r2, #0
 8002396:	2300      	movs	r3, #0
 8002398:	4630      	mov	r0, r6
 800239a:	4639      	mov	r1, r7
 800239c:	f7fe fb38 	bl	8000a10 <__aeabi_dcmpeq>
 80023a0:	2800      	cmp	r0, #0
 80023a2:	d0f2      	beq.n	800238a <pow+0xa2>
 80023a4:	eeb0 0a48 	vmov.f32	s0, s16
 80023a8:	eef0 0a68 	vmov.f32	s1, s17
 80023ac:	f000 fe25 	bl	8002ffa <finite>
 80023b0:	2800      	cmp	r0, #0
 80023b2:	d0ea      	beq.n	800238a <pow+0xa2>
 80023b4:	ec45 4b10 	vmov	d0, r4, r5
 80023b8:	f000 fe1f 	bl	8002ffa <finite>
 80023bc:	e7c3      	b.n	8002346 <pow+0x5e>
 80023be:	4f01      	ldr	r7, [pc, #4]	; (80023c4 <pow+0xdc>)
 80023c0:	2600      	movs	r6, #0
 80023c2:	e7e2      	b.n	800238a <pow+0xa2>
 80023c4:	3ff00000 	.word	0x3ff00000

080023c8 <__ieee754_pow>:
 80023c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023cc:	ed2d 8b06 	vpush	{d8-d10}
 80023d0:	b089      	sub	sp, #36	; 0x24
 80023d2:	ed8d 1b00 	vstr	d1, [sp]
 80023d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80023da:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80023de:	ea58 0102 	orrs.w	r1, r8, r2
 80023e2:	ec57 6b10 	vmov	r6, r7, d0
 80023e6:	d115      	bne.n	8002414 <__ieee754_pow+0x4c>
 80023e8:	19b3      	adds	r3, r6, r6
 80023ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80023ee:	4152      	adcs	r2, r2
 80023f0:	4299      	cmp	r1, r3
 80023f2:	4b89      	ldr	r3, [pc, #548]	; (8002618 <__ieee754_pow+0x250>)
 80023f4:	4193      	sbcs	r3, r2
 80023f6:	f080 84d2 	bcs.w	8002d9e <__ieee754_pow+0x9d6>
 80023fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80023fe:	4630      	mov	r0, r6
 8002400:	4639      	mov	r1, r7
 8002402:	f7fd fee7 	bl	80001d4 <__adddf3>
 8002406:	ec41 0b10 	vmov	d0, r0, r1
 800240a:	b009      	add	sp, #36	; 0x24
 800240c:	ecbd 8b06 	vpop	{d8-d10}
 8002410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002414:	4b81      	ldr	r3, [pc, #516]	; (800261c <__ieee754_pow+0x254>)
 8002416:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800241a:	429c      	cmp	r4, r3
 800241c:	ee10 aa10 	vmov	sl, s0
 8002420:	463d      	mov	r5, r7
 8002422:	dc06      	bgt.n	8002432 <__ieee754_pow+0x6a>
 8002424:	d101      	bne.n	800242a <__ieee754_pow+0x62>
 8002426:	2e00      	cmp	r6, #0
 8002428:	d1e7      	bne.n	80023fa <__ieee754_pow+0x32>
 800242a:	4598      	cmp	r8, r3
 800242c:	dc01      	bgt.n	8002432 <__ieee754_pow+0x6a>
 800242e:	d10f      	bne.n	8002450 <__ieee754_pow+0x88>
 8002430:	b172      	cbz	r2, 8002450 <__ieee754_pow+0x88>
 8002432:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8002436:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800243a:	ea55 050a 	orrs.w	r5, r5, sl
 800243e:	d1dc      	bne.n	80023fa <__ieee754_pow+0x32>
 8002440:	e9dd 3200 	ldrd	r3, r2, [sp]
 8002444:	18db      	adds	r3, r3, r3
 8002446:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800244a:	4152      	adcs	r2, r2
 800244c:	429d      	cmp	r5, r3
 800244e:	e7d0      	b.n	80023f2 <__ieee754_pow+0x2a>
 8002450:	2d00      	cmp	r5, #0
 8002452:	da3b      	bge.n	80024cc <__ieee754_pow+0x104>
 8002454:	4b72      	ldr	r3, [pc, #456]	; (8002620 <__ieee754_pow+0x258>)
 8002456:	4598      	cmp	r8, r3
 8002458:	dc51      	bgt.n	80024fe <__ieee754_pow+0x136>
 800245a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800245e:	4598      	cmp	r8, r3
 8002460:	f340 84ac 	ble.w	8002dbc <__ieee754_pow+0x9f4>
 8002464:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002468:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800246c:	2b14      	cmp	r3, #20
 800246e:	dd0f      	ble.n	8002490 <__ieee754_pow+0xc8>
 8002470:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002474:	fa22 f103 	lsr.w	r1, r2, r3
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	4293      	cmp	r3, r2
 800247e:	f040 849d 	bne.w	8002dbc <__ieee754_pow+0x9f4>
 8002482:	f001 0101 	and.w	r1, r1, #1
 8002486:	f1c1 0302 	rsb	r3, r1, #2
 800248a:	9304      	str	r3, [sp, #16]
 800248c:	b182      	cbz	r2, 80024b0 <__ieee754_pow+0xe8>
 800248e:	e05f      	b.n	8002550 <__ieee754_pow+0x188>
 8002490:	2a00      	cmp	r2, #0
 8002492:	d15b      	bne.n	800254c <__ieee754_pow+0x184>
 8002494:	f1c3 0314 	rsb	r3, r3, #20
 8002498:	fa48 f103 	asr.w	r1, r8, r3
 800249c:	fa01 f303 	lsl.w	r3, r1, r3
 80024a0:	4543      	cmp	r3, r8
 80024a2:	f040 8488 	bne.w	8002db6 <__ieee754_pow+0x9ee>
 80024a6:	f001 0101 	and.w	r1, r1, #1
 80024aa:	f1c1 0302 	rsb	r3, r1, #2
 80024ae:	9304      	str	r3, [sp, #16]
 80024b0:	4b5c      	ldr	r3, [pc, #368]	; (8002624 <__ieee754_pow+0x25c>)
 80024b2:	4598      	cmp	r8, r3
 80024b4:	d132      	bne.n	800251c <__ieee754_pow+0x154>
 80024b6:	f1b9 0f00 	cmp.w	r9, #0
 80024ba:	f280 8478 	bge.w	8002dae <__ieee754_pow+0x9e6>
 80024be:	4959      	ldr	r1, [pc, #356]	; (8002624 <__ieee754_pow+0x25c>)
 80024c0:	4632      	mov	r2, r6
 80024c2:	463b      	mov	r3, r7
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7fe f965 	bl	8000794 <__aeabi_ddiv>
 80024ca:	e79c      	b.n	8002406 <__ieee754_pow+0x3e>
 80024cc:	2300      	movs	r3, #0
 80024ce:	9304      	str	r3, [sp, #16]
 80024d0:	2a00      	cmp	r2, #0
 80024d2:	d13d      	bne.n	8002550 <__ieee754_pow+0x188>
 80024d4:	4b51      	ldr	r3, [pc, #324]	; (800261c <__ieee754_pow+0x254>)
 80024d6:	4598      	cmp	r8, r3
 80024d8:	d1ea      	bne.n	80024b0 <__ieee754_pow+0xe8>
 80024da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80024de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80024e2:	ea53 030a 	orrs.w	r3, r3, sl
 80024e6:	f000 845a 	beq.w	8002d9e <__ieee754_pow+0x9d6>
 80024ea:	4b4f      	ldr	r3, [pc, #316]	; (8002628 <__ieee754_pow+0x260>)
 80024ec:	429c      	cmp	r4, r3
 80024ee:	dd08      	ble.n	8002502 <__ieee754_pow+0x13a>
 80024f0:	f1b9 0f00 	cmp.w	r9, #0
 80024f4:	f2c0 8457 	blt.w	8002da6 <__ieee754_pow+0x9de>
 80024f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80024fc:	e783      	b.n	8002406 <__ieee754_pow+0x3e>
 80024fe:	2302      	movs	r3, #2
 8002500:	e7e5      	b.n	80024ce <__ieee754_pow+0x106>
 8002502:	f1b9 0f00 	cmp.w	r9, #0
 8002506:	f04f 0000 	mov.w	r0, #0
 800250a:	f04f 0100 	mov.w	r1, #0
 800250e:	f6bf af7a 	bge.w	8002406 <__ieee754_pow+0x3e>
 8002512:	e9dd 0300 	ldrd	r0, r3, [sp]
 8002516:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800251a:	e774      	b.n	8002406 <__ieee754_pow+0x3e>
 800251c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8002520:	d106      	bne.n	8002530 <__ieee754_pow+0x168>
 8002522:	4632      	mov	r2, r6
 8002524:	463b      	mov	r3, r7
 8002526:	4630      	mov	r0, r6
 8002528:	4639      	mov	r1, r7
 800252a:	f7fe f809 	bl	8000540 <__aeabi_dmul>
 800252e:	e76a      	b.n	8002406 <__ieee754_pow+0x3e>
 8002530:	4b3e      	ldr	r3, [pc, #248]	; (800262c <__ieee754_pow+0x264>)
 8002532:	4599      	cmp	r9, r3
 8002534:	d10c      	bne.n	8002550 <__ieee754_pow+0x188>
 8002536:	2d00      	cmp	r5, #0
 8002538:	db0a      	blt.n	8002550 <__ieee754_pow+0x188>
 800253a:	ec47 6b10 	vmov	d0, r6, r7
 800253e:	b009      	add	sp, #36	; 0x24
 8002540:	ecbd 8b06 	vpop	{d8-d10}
 8002544:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002548:	f000 bc6c 	b.w	8002e24 <__ieee754_sqrt>
 800254c:	2300      	movs	r3, #0
 800254e:	9304      	str	r3, [sp, #16]
 8002550:	ec47 6b10 	vmov	d0, r6, r7
 8002554:	f000 fd48 	bl	8002fe8 <fabs>
 8002558:	ec51 0b10 	vmov	r0, r1, d0
 800255c:	f1ba 0f00 	cmp.w	sl, #0
 8002560:	d129      	bne.n	80025b6 <__ieee754_pow+0x1ee>
 8002562:	b124      	cbz	r4, 800256e <__ieee754_pow+0x1a6>
 8002564:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <__ieee754_pow+0x25c>)
 8002566:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800256a:	429a      	cmp	r2, r3
 800256c:	d123      	bne.n	80025b6 <__ieee754_pow+0x1ee>
 800256e:	f1b9 0f00 	cmp.w	r9, #0
 8002572:	da05      	bge.n	8002580 <__ieee754_pow+0x1b8>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	2000      	movs	r0, #0
 800257a:	492a      	ldr	r1, [pc, #168]	; (8002624 <__ieee754_pow+0x25c>)
 800257c:	f7fe f90a 	bl	8000794 <__aeabi_ddiv>
 8002580:	2d00      	cmp	r5, #0
 8002582:	f6bf af40 	bge.w	8002406 <__ieee754_pow+0x3e>
 8002586:	9b04      	ldr	r3, [sp, #16]
 8002588:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800258c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002590:	4323      	orrs	r3, r4
 8002592:	d108      	bne.n	80025a6 <__ieee754_pow+0x1de>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	f7fd fe18 	bl	80001d0 <__aeabi_dsub>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	e78f      	b.n	80024c6 <__ieee754_pow+0xfe>
 80025a6:	9b04      	ldr	r3, [sp, #16]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	f47f af2c 	bne.w	8002406 <__ieee754_pow+0x3e>
 80025ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80025b2:	4619      	mov	r1, r3
 80025b4:	e727      	b.n	8002406 <__ieee754_pow+0x3e>
 80025b6:	0feb      	lsrs	r3, r5, #31
 80025b8:	3b01      	subs	r3, #1
 80025ba:	9306      	str	r3, [sp, #24]
 80025bc:	9a06      	ldr	r2, [sp, #24]
 80025be:	9b04      	ldr	r3, [sp, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	d102      	bne.n	80025ca <__ieee754_pow+0x202>
 80025c4:	4632      	mov	r2, r6
 80025c6:	463b      	mov	r3, r7
 80025c8:	e7e6      	b.n	8002598 <__ieee754_pow+0x1d0>
 80025ca:	4b19      	ldr	r3, [pc, #100]	; (8002630 <__ieee754_pow+0x268>)
 80025cc:	4598      	cmp	r8, r3
 80025ce:	f340 80fb 	ble.w	80027c8 <__ieee754_pow+0x400>
 80025d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80025d6:	4598      	cmp	r8, r3
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <__ieee754_pow+0x260>)
 80025da:	dd0c      	ble.n	80025f6 <__ieee754_pow+0x22e>
 80025dc:	429c      	cmp	r4, r3
 80025de:	dc0f      	bgt.n	8002600 <__ieee754_pow+0x238>
 80025e0:	f1b9 0f00 	cmp.w	r9, #0
 80025e4:	da0f      	bge.n	8002606 <__ieee754_pow+0x23e>
 80025e6:	2000      	movs	r0, #0
 80025e8:	b009      	add	sp, #36	; 0x24
 80025ea:	ecbd 8b06 	vpop	{d8-d10}
 80025ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025f2:	f000 bcf0 	b.w	8002fd6 <__math_oflow>
 80025f6:	429c      	cmp	r4, r3
 80025f8:	dbf2      	blt.n	80025e0 <__ieee754_pow+0x218>
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <__ieee754_pow+0x25c>)
 80025fc:	429c      	cmp	r4, r3
 80025fe:	dd19      	ble.n	8002634 <__ieee754_pow+0x26c>
 8002600:	f1b9 0f00 	cmp.w	r9, #0
 8002604:	dcef      	bgt.n	80025e6 <__ieee754_pow+0x21e>
 8002606:	2000      	movs	r0, #0
 8002608:	b009      	add	sp, #36	; 0x24
 800260a:	ecbd 8b06 	vpop	{d8-d10}
 800260e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002612:	f000 bcd7 	b.w	8002fc4 <__math_uflow>
 8002616:	bf00      	nop
 8002618:	fff00000 	.word	0xfff00000
 800261c:	7ff00000 	.word	0x7ff00000
 8002620:	433fffff 	.word	0x433fffff
 8002624:	3ff00000 	.word	0x3ff00000
 8002628:	3fefffff 	.word	0x3fefffff
 800262c:	3fe00000 	.word	0x3fe00000
 8002630:	41e00000 	.word	0x41e00000
 8002634:	4b60      	ldr	r3, [pc, #384]	; (80027b8 <__ieee754_pow+0x3f0>)
 8002636:	2200      	movs	r2, #0
 8002638:	f7fd fdca 	bl	80001d0 <__aeabi_dsub>
 800263c:	a354      	add	r3, pc, #336	; (adr r3, 8002790 <__ieee754_pow+0x3c8>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	4604      	mov	r4, r0
 8002644:	460d      	mov	r5, r1
 8002646:	f7fd ff7b 	bl	8000540 <__aeabi_dmul>
 800264a:	a353      	add	r3, pc, #332	; (adr r3, 8002798 <__ieee754_pow+0x3d0>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	4606      	mov	r6, r0
 8002652:	460f      	mov	r7, r1
 8002654:	4620      	mov	r0, r4
 8002656:	4629      	mov	r1, r5
 8002658:	f7fd ff72 	bl	8000540 <__aeabi_dmul>
 800265c:	4b57      	ldr	r3, [pc, #348]	; (80027bc <__ieee754_pow+0x3f4>)
 800265e:	4682      	mov	sl, r0
 8002660:	468b      	mov	fp, r1
 8002662:	2200      	movs	r2, #0
 8002664:	4620      	mov	r0, r4
 8002666:	4629      	mov	r1, r5
 8002668:	f7fd ff6a 	bl	8000540 <__aeabi_dmul>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	a14b      	add	r1, pc, #300	; (adr r1, 80027a0 <__ieee754_pow+0x3d8>)
 8002672:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002676:	f7fd fdab 	bl	80001d0 <__aeabi_dsub>
 800267a:	4622      	mov	r2, r4
 800267c:	462b      	mov	r3, r5
 800267e:	f7fd ff5f 	bl	8000540 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	2000      	movs	r0, #0
 8002688:	494d      	ldr	r1, [pc, #308]	; (80027c0 <__ieee754_pow+0x3f8>)
 800268a:	f7fd fda1 	bl	80001d0 <__aeabi_dsub>
 800268e:	4622      	mov	r2, r4
 8002690:	4680      	mov	r8, r0
 8002692:	4689      	mov	r9, r1
 8002694:	462b      	mov	r3, r5
 8002696:	4620      	mov	r0, r4
 8002698:	4629      	mov	r1, r5
 800269a:	f7fd ff51 	bl	8000540 <__aeabi_dmul>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4640      	mov	r0, r8
 80026a4:	4649      	mov	r1, r9
 80026a6:	f7fd ff4b 	bl	8000540 <__aeabi_dmul>
 80026aa:	a33f      	add	r3, pc, #252	; (adr r3, 80027a8 <__ieee754_pow+0x3e0>)
 80026ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b0:	f7fd ff46 	bl	8000540 <__aeabi_dmul>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4650      	mov	r0, sl
 80026ba:	4659      	mov	r1, fp
 80026bc:	f7fd fd88 	bl	80001d0 <__aeabi_dsub>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4680      	mov	r8, r0
 80026c6:	4689      	mov	r9, r1
 80026c8:	4630      	mov	r0, r6
 80026ca:	4639      	mov	r1, r7
 80026cc:	f7fd fd82 	bl	80001d4 <__adddf3>
 80026d0:	2000      	movs	r0, #0
 80026d2:	4632      	mov	r2, r6
 80026d4:	463b      	mov	r3, r7
 80026d6:	4604      	mov	r4, r0
 80026d8:	460d      	mov	r5, r1
 80026da:	f7fd fd79 	bl	80001d0 <__aeabi_dsub>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4640      	mov	r0, r8
 80026e4:	4649      	mov	r1, r9
 80026e6:	f7fd fd73 	bl	80001d0 <__aeabi_dsub>
 80026ea:	9b04      	ldr	r3, [sp, #16]
 80026ec:	9a06      	ldr	r2, [sp, #24]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	4313      	orrs	r3, r2
 80026f2:	4682      	mov	sl, r0
 80026f4:	468b      	mov	fp, r1
 80026f6:	f040 81e7 	bne.w	8002ac8 <__ieee754_pow+0x700>
 80026fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80027b0 <__ieee754_pow+0x3e8>
 80026fe:	eeb0 8a47 	vmov.f32	s16, s14
 8002702:	eef0 8a67 	vmov.f32	s17, s15
 8002706:	e9dd 6700 	ldrd	r6, r7, [sp]
 800270a:	2600      	movs	r6, #0
 800270c:	4632      	mov	r2, r6
 800270e:	463b      	mov	r3, r7
 8002710:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002714:	f7fd fd5c 	bl	80001d0 <__aeabi_dsub>
 8002718:	4622      	mov	r2, r4
 800271a:	462b      	mov	r3, r5
 800271c:	f7fd ff10 	bl	8000540 <__aeabi_dmul>
 8002720:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002724:	4680      	mov	r8, r0
 8002726:	4689      	mov	r9, r1
 8002728:	4650      	mov	r0, sl
 800272a:	4659      	mov	r1, fp
 800272c:	f7fd ff08 	bl	8000540 <__aeabi_dmul>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4640      	mov	r0, r8
 8002736:	4649      	mov	r1, r9
 8002738:	f7fd fd4c 	bl	80001d4 <__adddf3>
 800273c:	4632      	mov	r2, r6
 800273e:	463b      	mov	r3, r7
 8002740:	4680      	mov	r8, r0
 8002742:	4689      	mov	r9, r1
 8002744:	4620      	mov	r0, r4
 8002746:	4629      	mov	r1, r5
 8002748:	f7fd fefa 	bl	8000540 <__aeabi_dmul>
 800274c:	460b      	mov	r3, r1
 800274e:	4604      	mov	r4, r0
 8002750:	460d      	mov	r5, r1
 8002752:	4602      	mov	r2, r0
 8002754:	4649      	mov	r1, r9
 8002756:	4640      	mov	r0, r8
 8002758:	f7fd fd3c 	bl	80001d4 <__adddf3>
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <__ieee754_pow+0x3fc>)
 800275e:	4299      	cmp	r1, r3
 8002760:	ec45 4b19 	vmov	d9, r4, r5
 8002764:	4606      	mov	r6, r0
 8002766:	460f      	mov	r7, r1
 8002768:	468b      	mov	fp, r1
 800276a:	f340 82f1 	ble.w	8002d50 <__ieee754_pow+0x988>
 800276e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002772:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002776:	4303      	orrs	r3, r0
 8002778:	f000 81e4 	beq.w	8002b44 <__ieee754_pow+0x77c>
 800277c:	ec51 0b18 	vmov	r0, r1, d8
 8002780:	2200      	movs	r2, #0
 8002782:	2300      	movs	r3, #0
 8002784:	f7fe f94e 	bl	8000a24 <__aeabi_dcmplt>
 8002788:	3800      	subs	r0, #0
 800278a:	bf18      	it	ne
 800278c:	2001      	movne	r0, #1
 800278e:	e72b      	b.n	80025e8 <__ieee754_pow+0x220>
 8002790:	60000000 	.word	0x60000000
 8002794:	3ff71547 	.word	0x3ff71547
 8002798:	f85ddf44 	.word	0xf85ddf44
 800279c:	3e54ae0b 	.word	0x3e54ae0b
 80027a0:	55555555 	.word	0x55555555
 80027a4:	3fd55555 	.word	0x3fd55555
 80027a8:	652b82fe 	.word	0x652b82fe
 80027ac:	3ff71547 	.word	0x3ff71547
 80027b0:	00000000 	.word	0x00000000
 80027b4:	bff00000 	.word	0xbff00000
 80027b8:	3ff00000 	.word	0x3ff00000
 80027bc:	3fd00000 	.word	0x3fd00000
 80027c0:	3fe00000 	.word	0x3fe00000
 80027c4:	408fffff 	.word	0x408fffff
 80027c8:	4bd5      	ldr	r3, [pc, #852]	; (8002b20 <__ieee754_pow+0x758>)
 80027ca:	402b      	ands	r3, r5
 80027cc:	2200      	movs	r2, #0
 80027ce:	b92b      	cbnz	r3, 80027dc <__ieee754_pow+0x414>
 80027d0:	4bd4      	ldr	r3, [pc, #848]	; (8002b24 <__ieee754_pow+0x75c>)
 80027d2:	f7fd feb5 	bl	8000540 <__aeabi_dmul>
 80027d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80027da:	460c      	mov	r4, r1
 80027dc:	1523      	asrs	r3, r4, #20
 80027de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80027e2:	4413      	add	r3, r2
 80027e4:	9305      	str	r3, [sp, #20]
 80027e6:	4bd0      	ldr	r3, [pc, #832]	; (8002b28 <__ieee754_pow+0x760>)
 80027e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80027ec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80027f0:	429c      	cmp	r4, r3
 80027f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80027f6:	dd08      	ble.n	800280a <__ieee754_pow+0x442>
 80027f8:	4bcc      	ldr	r3, [pc, #816]	; (8002b2c <__ieee754_pow+0x764>)
 80027fa:	429c      	cmp	r4, r3
 80027fc:	f340 8162 	ble.w	8002ac4 <__ieee754_pow+0x6fc>
 8002800:	9b05      	ldr	r3, [sp, #20]
 8002802:	3301      	adds	r3, #1
 8002804:	9305      	str	r3, [sp, #20]
 8002806:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800280a:	2400      	movs	r4, #0
 800280c:	00e3      	lsls	r3, r4, #3
 800280e:	9307      	str	r3, [sp, #28]
 8002810:	4bc7      	ldr	r3, [pc, #796]	; (8002b30 <__ieee754_pow+0x768>)
 8002812:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002816:	ed93 7b00 	vldr	d7, [r3]
 800281a:	4629      	mov	r1, r5
 800281c:	ec53 2b17 	vmov	r2, r3, d7
 8002820:	eeb0 9a47 	vmov.f32	s18, s14
 8002824:	eef0 9a67 	vmov.f32	s19, s15
 8002828:	4682      	mov	sl, r0
 800282a:	f7fd fcd1 	bl	80001d0 <__aeabi_dsub>
 800282e:	4652      	mov	r2, sl
 8002830:	4606      	mov	r6, r0
 8002832:	460f      	mov	r7, r1
 8002834:	462b      	mov	r3, r5
 8002836:	ec51 0b19 	vmov	r0, r1, d9
 800283a:	f7fd fccb 	bl	80001d4 <__adddf3>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	2000      	movs	r0, #0
 8002844:	49bb      	ldr	r1, [pc, #748]	; (8002b34 <__ieee754_pow+0x76c>)
 8002846:	f7fd ffa5 	bl	8000794 <__aeabi_ddiv>
 800284a:	ec41 0b1a 	vmov	d10, r0, r1
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4630      	mov	r0, r6
 8002854:	4639      	mov	r1, r7
 8002856:	f7fd fe73 	bl	8000540 <__aeabi_dmul>
 800285a:	2300      	movs	r3, #0
 800285c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002860:	9302      	str	r3, [sp, #8]
 8002862:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8002866:	46ab      	mov	fp, r5
 8002868:	106d      	asrs	r5, r5, #1
 800286a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800286e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002872:	ec41 0b18 	vmov	d8, r0, r1
 8002876:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800287a:	2200      	movs	r2, #0
 800287c:	4640      	mov	r0, r8
 800287e:	4649      	mov	r1, r9
 8002880:	4614      	mov	r4, r2
 8002882:	461d      	mov	r5, r3
 8002884:	f7fd fe5c 	bl	8000540 <__aeabi_dmul>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4630      	mov	r0, r6
 800288e:	4639      	mov	r1, r7
 8002890:	f7fd fc9e 	bl	80001d0 <__aeabi_dsub>
 8002894:	ec53 2b19 	vmov	r2, r3, d9
 8002898:	4606      	mov	r6, r0
 800289a:	460f      	mov	r7, r1
 800289c:	4620      	mov	r0, r4
 800289e:	4629      	mov	r1, r5
 80028a0:	f7fd fc96 	bl	80001d0 <__aeabi_dsub>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4650      	mov	r0, sl
 80028aa:	4659      	mov	r1, fp
 80028ac:	f7fd fc90 	bl	80001d0 <__aeabi_dsub>
 80028b0:	4642      	mov	r2, r8
 80028b2:	464b      	mov	r3, r9
 80028b4:	f7fd fe44 	bl	8000540 <__aeabi_dmul>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4630      	mov	r0, r6
 80028be:	4639      	mov	r1, r7
 80028c0:	f7fd fc86 	bl	80001d0 <__aeabi_dsub>
 80028c4:	ec53 2b1a 	vmov	r2, r3, d10
 80028c8:	f7fd fe3a 	bl	8000540 <__aeabi_dmul>
 80028cc:	ec53 2b18 	vmov	r2, r3, d8
 80028d0:	ec41 0b19 	vmov	d9, r0, r1
 80028d4:	ec51 0b18 	vmov	r0, r1, d8
 80028d8:	f7fd fe32 	bl	8000540 <__aeabi_dmul>
 80028dc:	a37c      	add	r3, pc, #496	; (adr r3, 8002ad0 <__ieee754_pow+0x708>)
 80028de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e2:	4604      	mov	r4, r0
 80028e4:	460d      	mov	r5, r1
 80028e6:	f7fd fe2b 	bl	8000540 <__aeabi_dmul>
 80028ea:	a37b      	add	r3, pc, #492	; (adr r3, 8002ad8 <__ieee754_pow+0x710>)
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	f7fd fc70 	bl	80001d4 <__adddf3>
 80028f4:	4622      	mov	r2, r4
 80028f6:	462b      	mov	r3, r5
 80028f8:	f7fd fe22 	bl	8000540 <__aeabi_dmul>
 80028fc:	a378      	add	r3, pc, #480	; (adr r3, 8002ae0 <__ieee754_pow+0x718>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	f7fd fc67 	bl	80001d4 <__adddf3>
 8002906:	4622      	mov	r2, r4
 8002908:	462b      	mov	r3, r5
 800290a:	f7fd fe19 	bl	8000540 <__aeabi_dmul>
 800290e:	a376      	add	r3, pc, #472	; (adr r3, 8002ae8 <__ieee754_pow+0x720>)
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f7fd fc5e 	bl	80001d4 <__adddf3>
 8002918:	4622      	mov	r2, r4
 800291a:	462b      	mov	r3, r5
 800291c:	f7fd fe10 	bl	8000540 <__aeabi_dmul>
 8002920:	a373      	add	r3, pc, #460	; (adr r3, 8002af0 <__ieee754_pow+0x728>)
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	f7fd fc55 	bl	80001d4 <__adddf3>
 800292a:	4622      	mov	r2, r4
 800292c:	462b      	mov	r3, r5
 800292e:	f7fd fe07 	bl	8000540 <__aeabi_dmul>
 8002932:	a371      	add	r3, pc, #452	; (adr r3, 8002af8 <__ieee754_pow+0x730>)
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	f7fd fc4c 	bl	80001d4 <__adddf3>
 800293c:	4622      	mov	r2, r4
 800293e:	4606      	mov	r6, r0
 8002940:	460f      	mov	r7, r1
 8002942:	462b      	mov	r3, r5
 8002944:	4620      	mov	r0, r4
 8002946:	4629      	mov	r1, r5
 8002948:	f7fd fdfa 	bl	8000540 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4630      	mov	r0, r6
 8002952:	4639      	mov	r1, r7
 8002954:	f7fd fdf4 	bl	8000540 <__aeabi_dmul>
 8002958:	4642      	mov	r2, r8
 800295a:	4604      	mov	r4, r0
 800295c:	460d      	mov	r5, r1
 800295e:	464b      	mov	r3, r9
 8002960:	ec51 0b18 	vmov	r0, r1, d8
 8002964:	f7fd fc36 	bl	80001d4 <__adddf3>
 8002968:	ec53 2b19 	vmov	r2, r3, d9
 800296c:	f7fd fde8 	bl	8000540 <__aeabi_dmul>
 8002970:	4622      	mov	r2, r4
 8002972:	462b      	mov	r3, r5
 8002974:	f7fd fc2e 	bl	80001d4 <__adddf3>
 8002978:	4642      	mov	r2, r8
 800297a:	4682      	mov	sl, r0
 800297c:	468b      	mov	fp, r1
 800297e:	464b      	mov	r3, r9
 8002980:	4640      	mov	r0, r8
 8002982:	4649      	mov	r1, r9
 8002984:	f7fd fddc 	bl	8000540 <__aeabi_dmul>
 8002988:	4b6b      	ldr	r3, [pc, #428]	; (8002b38 <__ieee754_pow+0x770>)
 800298a:	2200      	movs	r2, #0
 800298c:	4606      	mov	r6, r0
 800298e:	460f      	mov	r7, r1
 8002990:	f7fd fc20 	bl	80001d4 <__adddf3>
 8002994:	4652      	mov	r2, sl
 8002996:	465b      	mov	r3, fp
 8002998:	f7fd fc1c 	bl	80001d4 <__adddf3>
 800299c:	2000      	movs	r0, #0
 800299e:	4604      	mov	r4, r0
 80029a0:	460d      	mov	r5, r1
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4640      	mov	r0, r8
 80029a8:	4649      	mov	r1, r9
 80029aa:	f7fd fdc9 	bl	8000540 <__aeabi_dmul>
 80029ae:	4b62      	ldr	r3, [pc, #392]	; (8002b38 <__ieee754_pow+0x770>)
 80029b0:	4680      	mov	r8, r0
 80029b2:	4689      	mov	r9, r1
 80029b4:	2200      	movs	r2, #0
 80029b6:	4620      	mov	r0, r4
 80029b8:	4629      	mov	r1, r5
 80029ba:	f7fd fc09 	bl	80001d0 <__aeabi_dsub>
 80029be:	4632      	mov	r2, r6
 80029c0:	463b      	mov	r3, r7
 80029c2:	f7fd fc05 	bl	80001d0 <__aeabi_dsub>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4650      	mov	r0, sl
 80029cc:	4659      	mov	r1, fp
 80029ce:	f7fd fbff 	bl	80001d0 <__aeabi_dsub>
 80029d2:	ec53 2b18 	vmov	r2, r3, d8
 80029d6:	f7fd fdb3 	bl	8000540 <__aeabi_dmul>
 80029da:	4622      	mov	r2, r4
 80029dc:	4606      	mov	r6, r0
 80029de:	460f      	mov	r7, r1
 80029e0:	462b      	mov	r3, r5
 80029e2:	ec51 0b19 	vmov	r0, r1, d9
 80029e6:	f7fd fdab 	bl	8000540 <__aeabi_dmul>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4630      	mov	r0, r6
 80029f0:	4639      	mov	r1, r7
 80029f2:	f7fd fbef 	bl	80001d4 <__adddf3>
 80029f6:	4606      	mov	r6, r0
 80029f8:	460f      	mov	r7, r1
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4640      	mov	r0, r8
 8002a00:	4649      	mov	r1, r9
 8002a02:	f7fd fbe7 	bl	80001d4 <__adddf3>
 8002a06:	a33e      	add	r3, pc, #248	; (adr r3, 8002b00 <__ieee754_pow+0x738>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	4604      	mov	r4, r0
 8002a10:	460d      	mov	r5, r1
 8002a12:	f7fd fd95 	bl	8000540 <__aeabi_dmul>
 8002a16:	4642      	mov	r2, r8
 8002a18:	ec41 0b18 	vmov	d8, r0, r1
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	4620      	mov	r0, r4
 8002a20:	4629      	mov	r1, r5
 8002a22:	f7fd fbd5 	bl	80001d0 <__aeabi_dsub>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4630      	mov	r0, r6
 8002a2c:	4639      	mov	r1, r7
 8002a2e:	f7fd fbcf 	bl	80001d0 <__aeabi_dsub>
 8002a32:	a335      	add	r3, pc, #212	; (adr r3, 8002b08 <__ieee754_pow+0x740>)
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	f7fd fd82 	bl	8000540 <__aeabi_dmul>
 8002a3c:	a334      	add	r3, pc, #208	; (adr r3, 8002b10 <__ieee754_pow+0x748>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	4606      	mov	r6, r0
 8002a44:	460f      	mov	r7, r1
 8002a46:	4620      	mov	r0, r4
 8002a48:	4629      	mov	r1, r5
 8002a4a:	f7fd fd79 	bl	8000540 <__aeabi_dmul>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4630      	mov	r0, r6
 8002a54:	4639      	mov	r1, r7
 8002a56:	f7fd fbbd 	bl	80001d4 <__adddf3>
 8002a5a:	9a07      	ldr	r2, [sp, #28]
 8002a5c:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <__ieee754_pow+0x774>)
 8002a5e:	4413      	add	r3, r2
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fd fbb6 	bl	80001d4 <__adddf3>
 8002a68:	4682      	mov	sl, r0
 8002a6a:	9805      	ldr	r0, [sp, #20]
 8002a6c:	468b      	mov	fp, r1
 8002a6e:	f7fd fcfd 	bl	800046c <__aeabi_i2d>
 8002a72:	9a07      	ldr	r2, [sp, #28]
 8002a74:	4b32      	ldr	r3, [pc, #200]	; (8002b40 <__ieee754_pow+0x778>)
 8002a76:	4413      	add	r3, r2
 8002a78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002a7c:	4606      	mov	r6, r0
 8002a7e:	460f      	mov	r7, r1
 8002a80:	4652      	mov	r2, sl
 8002a82:	465b      	mov	r3, fp
 8002a84:	ec51 0b18 	vmov	r0, r1, d8
 8002a88:	f7fd fba4 	bl	80001d4 <__adddf3>
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	464b      	mov	r3, r9
 8002a90:	f7fd fba0 	bl	80001d4 <__adddf3>
 8002a94:	4632      	mov	r2, r6
 8002a96:	463b      	mov	r3, r7
 8002a98:	f7fd fb9c 	bl	80001d4 <__adddf3>
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	4632      	mov	r2, r6
 8002aa0:	463b      	mov	r3, r7
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	460d      	mov	r5, r1
 8002aa6:	f7fd fb93 	bl	80001d0 <__aeabi_dsub>
 8002aaa:	4642      	mov	r2, r8
 8002aac:	464b      	mov	r3, r9
 8002aae:	f7fd fb8f 	bl	80001d0 <__aeabi_dsub>
 8002ab2:	ec53 2b18 	vmov	r2, r3, d8
 8002ab6:	f7fd fb8b 	bl	80001d0 <__aeabi_dsub>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4650      	mov	r0, sl
 8002ac0:	4659      	mov	r1, fp
 8002ac2:	e610      	b.n	80026e6 <__ieee754_pow+0x31e>
 8002ac4:	2401      	movs	r4, #1
 8002ac6:	e6a1      	b.n	800280c <__ieee754_pow+0x444>
 8002ac8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8002b18 <__ieee754_pow+0x750>
 8002acc:	e617      	b.n	80026fe <__ieee754_pow+0x336>
 8002ace:	bf00      	nop
 8002ad0:	4a454eef 	.word	0x4a454eef
 8002ad4:	3fca7e28 	.word	0x3fca7e28
 8002ad8:	93c9db65 	.word	0x93c9db65
 8002adc:	3fcd864a 	.word	0x3fcd864a
 8002ae0:	a91d4101 	.word	0xa91d4101
 8002ae4:	3fd17460 	.word	0x3fd17460
 8002ae8:	518f264d 	.word	0x518f264d
 8002aec:	3fd55555 	.word	0x3fd55555
 8002af0:	db6fabff 	.word	0xdb6fabff
 8002af4:	3fdb6db6 	.word	0x3fdb6db6
 8002af8:	33333303 	.word	0x33333303
 8002afc:	3fe33333 	.word	0x3fe33333
 8002b00:	e0000000 	.word	0xe0000000
 8002b04:	3feec709 	.word	0x3feec709
 8002b08:	dc3a03fd 	.word	0xdc3a03fd
 8002b0c:	3feec709 	.word	0x3feec709
 8002b10:	145b01f5 	.word	0x145b01f5
 8002b14:	be3e2fe0 	.word	0xbe3e2fe0
 8002b18:	00000000 	.word	0x00000000
 8002b1c:	3ff00000 	.word	0x3ff00000
 8002b20:	7ff00000 	.word	0x7ff00000
 8002b24:	43400000 	.word	0x43400000
 8002b28:	0003988e 	.word	0x0003988e
 8002b2c:	000bb679 	.word	0x000bb679
 8002b30:	08003148 	.word	0x08003148
 8002b34:	3ff00000 	.word	0x3ff00000
 8002b38:	40080000 	.word	0x40080000
 8002b3c:	08003168 	.word	0x08003168
 8002b40:	08003158 	.word	0x08003158
 8002b44:	a3b5      	add	r3, pc, #724	; (adr r3, 8002e1c <__ieee754_pow+0xa54>)
 8002b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4a:	4640      	mov	r0, r8
 8002b4c:	4649      	mov	r1, r9
 8002b4e:	f7fd fb41 	bl	80001d4 <__adddf3>
 8002b52:	4622      	mov	r2, r4
 8002b54:	ec41 0b1a 	vmov	d10, r0, r1
 8002b58:	462b      	mov	r3, r5
 8002b5a:	4630      	mov	r0, r6
 8002b5c:	4639      	mov	r1, r7
 8002b5e:	f7fd fb37 	bl	80001d0 <__aeabi_dsub>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	ec51 0b1a 	vmov	r0, r1, d10
 8002b6a:	f7fd ff79 	bl	8000a60 <__aeabi_dcmpgt>
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	f47f ae04 	bne.w	800277c <__ieee754_pow+0x3b4>
 8002b74:	4aa4      	ldr	r2, [pc, #656]	; (8002e08 <__ieee754_pow+0xa40>)
 8002b76:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	f340 8108 	ble.w	8002d90 <__ieee754_pow+0x9c8>
 8002b80:	151b      	asrs	r3, r3, #20
 8002b82:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8002b86:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8002b8a:	fa4a f303 	asr.w	r3, sl, r3
 8002b8e:	445b      	add	r3, fp
 8002b90:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8002b94:	4e9d      	ldr	r6, [pc, #628]	; (8002e0c <__ieee754_pow+0xa44>)
 8002b96:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8002b9a:	4116      	asrs	r6, r2
 8002b9c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	ea23 0106 	bic.w	r1, r3, r6
 8002ba6:	f1c2 0214 	rsb	r2, r2, #20
 8002baa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8002bae:	fa4a fa02 	asr.w	sl, sl, r2
 8002bb2:	f1bb 0f00 	cmp.w	fp, #0
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4620      	mov	r0, r4
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	bfb8      	it	lt
 8002bc0:	f1ca 0a00 	rsblt	sl, sl, #0
 8002bc4:	f7fd fb04 	bl	80001d0 <__aeabi_dsub>
 8002bc8:	ec41 0b19 	vmov	d9, r0, r1
 8002bcc:	4642      	mov	r2, r8
 8002bce:	464b      	mov	r3, r9
 8002bd0:	ec51 0b19 	vmov	r0, r1, d9
 8002bd4:	f7fd fafe 	bl	80001d4 <__adddf3>
 8002bd8:	a37b      	add	r3, pc, #492	; (adr r3, 8002dc8 <__ieee754_pow+0xa00>)
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	2000      	movs	r0, #0
 8002be0:	4604      	mov	r4, r0
 8002be2:	460d      	mov	r5, r1
 8002be4:	f7fd fcac 	bl	8000540 <__aeabi_dmul>
 8002be8:	ec53 2b19 	vmov	r2, r3, d9
 8002bec:	4606      	mov	r6, r0
 8002bee:	460f      	mov	r7, r1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	f7fd faec 	bl	80001d0 <__aeabi_dsub>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4640      	mov	r0, r8
 8002bfe:	4649      	mov	r1, r9
 8002c00:	f7fd fae6 	bl	80001d0 <__aeabi_dsub>
 8002c04:	a372      	add	r3, pc, #456	; (adr r3, 8002dd0 <__ieee754_pow+0xa08>)
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	f7fd fc99 	bl	8000540 <__aeabi_dmul>
 8002c0e:	a372      	add	r3, pc, #456	; (adr r3, 8002dd8 <__ieee754_pow+0xa10>)
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	4680      	mov	r8, r0
 8002c16:	4689      	mov	r9, r1
 8002c18:	4620      	mov	r0, r4
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	f7fd fc90 	bl	8000540 <__aeabi_dmul>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4640      	mov	r0, r8
 8002c26:	4649      	mov	r1, r9
 8002c28:	f7fd fad4 	bl	80001d4 <__adddf3>
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	460d      	mov	r5, r1
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4630      	mov	r0, r6
 8002c36:	4639      	mov	r1, r7
 8002c38:	f7fd facc 	bl	80001d4 <__adddf3>
 8002c3c:	4632      	mov	r2, r6
 8002c3e:	463b      	mov	r3, r7
 8002c40:	4680      	mov	r8, r0
 8002c42:	4689      	mov	r9, r1
 8002c44:	f7fd fac4 	bl	80001d0 <__aeabi_dsub>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	4629      	mov	r1, r5
 8002c50:	f7fd fabe 	bl	80001d0 <__aeabi_dsub>
 8002c54:	4642      	mov	r2, r8
 8002c56:	4606      	mov	r6, r0
 8002c58:	460f      	mov	r7, r1
 8002c5a:	464b      	mov	r3, r9
 8002c5c:	4640      	mov	r0, r8
 8002c5e:	4649      	mov	r1, r9
 8002c60:	f7fd fc6e 	bl	8000540 <__aeabi_dmul>
 8002c64:	a35e      	add	r3, pc, #376	; (adr r3, 8002de0 <__ieee754_pow+0xa18>)
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	460d      	mov	r5, r1
 8002c6e:	f7fd fc67 	bl	8000540 <__aeabi_dmul>
 8002c72:	a35d      	add	r3, pc, #372	; (adr r3, 8002de8 <__ieee754_pow+0xa20>)
 8002c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c78:	f7fd faaa 	bl	80001d0 <__aeabi_dsub>
 8002c7c:	4622      	mov	r2, r4
 8002c7e:	462b      	mov	r3, r5
 8002c80:	f7fd fc5e 	bl	8000540 <__aeabi_dmul>
 8002c84:	a35a      	add	r3, pc, #360	; (adr r3, 8002df0 <__ieee754_pow+0xa28>)
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	f7fd faa3 	bl	80001d4 <__adddf3>
 8002c8e:	4622      	mov	r2, r4
 8002c90:	462b      	mov	r3, r5
 8002c92:	f7fd fc55 	bl	8000540 <__aeabi_dmul>
 8002c96:	a358      	add	r3, pc, #352	; (adr r3, 8002df8 <__ieee754_pow+0xa30>)
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	f7fd fa98 	bl	80001d0 <__aeabi_dsub>
 8002ca0:	4622      	mov	r2, r4
 8002ca2:	462b      	mov	r3, r5
 8002ca4:	f7fd fc4c 	bl	8000540 <__aeabi_dmul>
 8002ca8:	a355      	add	r3, pc, #340	; (adr r3, 8002e00 <__ieee754_pow+0xa38>)
 8002caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cae:	f7fd fa91 	bl	80001d4 <__adddf3>
 8002cb2:	4622      	mov	r2, r4
 8002cb4:	462b      	mov	r3, r5
 8002cb6:	f7fd fc43 	bl	8000540 <__aeabi_dmul>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4640      	mov	r0, r8
 8002cc0:	4649      	mov	r1, r9
 8002cc2:	f7fd fa85 	bl	80001d0 <__aeabi_dsub>
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	460d      	mov	r5, r1
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4640      	mov	r0, r8
 8002cd0:	4649      	mov	r1, r9
 8002cd2:	f7fd fc35 	bl	8000540 <__aeabi_dmul>
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	ec41 0b19 	vmov	d9, r0, r1
 8002cdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	f7fd fa74 	bl	80001d0 <__aeabi_dsub>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	ec51 0b19 	vmov	r0, r1, d9
 8002cf0:	f7fd fd50 	bl	8000794 <__aeabi_ddiv>
 8002cf4:	4632      	mov	r2, r6
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	460d      	mov	r5, r1
 8002cfa:	463b      	mov	r3, r7
 8002cfc:	4640      	mov	r0, r8
 8002cfe:	4649      	mov	r1, r9
 8002d00:	f7fd fc1e 	bl	8000540 <__aeabi_dmul>
 8002d04:	4632      	mov	r2, r6
 8002d06:	463b      	mov	r3, r7
 8002d08:	f7fd fa64 	bl	80001d4 <__adddf3>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4620      	mov	r0, r4
 8002d12:	4629      	mov	r1, r5
 8002d14:	f7fd fa5c 	bl	80001d0 <__aeabi_dsub>
 8002d18:	4642      	mov	r2, r8
 8002d1a:	464b      	mov	r3, r9
 8002d1c:	f7fd fa58 	bl	80001d0 <__aeabi_dsub>
 8002d20:	460b      	mov	r3, r1
 8002d22:	4602      	mov	r2, r0
 8002d24:	493a      	ldr	r1, [pc, #232]	; (8002e10 <__ieee754_pow+0xa48>)
 8002d26:	2000      	movs	r0, #0
 8002d28:	f7fd fa52 	bl	80001d0 <__aeabi_dsub>
 8002d2c:	ec41 0b10 	vmov	d0, r0, r1
 8002d30:	ee10 3a90 	vmov	r3, s1
 8002d34:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8002d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d3c:	da2b      	bge.n	8002d96 <__ieee754_pow+0x9ce>
 8002d3e:	4650      	mov	r0, sl
 8002d40:	f000 f966 	bl	8003010 <scalbn>
 8002d44:	ec51 0b10 	vmov	r0, r1, d0
 8002d48:	ec53 2b18 	vmov	r2, r3, d8
 8002d4c:	f7ff bbed 	b.w	800252a <__ieee754_pow+0x162>
 8002d50:	4b30      	ldr	r3, [pc, #192]	; (8002e14 <__ieee754_pow+0xa4c>)
 8002d52:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8002d56:	429e      	cmp	r6, r3
 8002d58:	f77f af0c 	ble.w	8002b74 <__ieee754_pow+0x7ac>
 8002d5c:	4b2e      	ldr	r3, [pc, #184]	; (8002e18 <__ieee754_pow+0xa50>)
 8002d5e:	440b      	add	r3, r1
 8002d60:	4303      	orrs	r3, r0
 8002d62:	d009      	beq.n	8002d78 <__ieee754_pow+0x9b0>
 8002d64:	ec51 0b18 	vmov	r0, r1, d8
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f7fd fe5a 	bl	8000a24 <__aeabi_dcmplt>
 8002d70:	3800      	subs	r0, #0
 8002d72:	bf18      	it	ne
 8002d74:	2001      	movne	r0, #1
 8002d76:	e447      	b.n	8002608 <__ieee754_pow+0x240>
 8002d78:	4622      	mov	r2, r4
 8002d7a:	462b      	mov	r3, r5
 8002d7c:	f7fd fa28 	bl	80001d0 <__aeabi_dsub>
 8002d80:	4642      	mov	r2, r8
 8002d82:	464b      	mov	r3, r9
 8002d84:	f7fd fe62 	bl	8000a4c <__aeabi_dcmpge>
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	f43f aef3 	beq.w	8002b74 <__ieee754_pow+0x7ac>
 8002d8e:	e7e9      	b.n	8002d64 <__ieee754_pow+0x99c>
 8002d90:	f04f 0a00 	mov.w	sl, #0
 8002d94:	e71a      	b.n	8002bcc <__ieee754_pow+0x804>
 8002d96:	ec51 0b10 	vmov	r0, r1, d0
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	e7d4      	b.n	8002d48 <__ieee754_pow+0x980>
 8002d9e:	491c      	ldr	r1, [pc, #112]	; (8002e10 <__ieee754_pow+0xa48>)
 8002da0:	2000      	movs	r0, #0
 8002da2:	f7ff bb30 	b.w	8002406 <__ieee754_pow+0x3e>
 8002da6:	2000      	movs	r0, #0
 8002da8:	2100      	movs	r1, #0
 8002daa:	f7ff bb2c 	b.w	8002406 <__ieee754_pow+0x3e>
 8002dae:	4630      	mov	r0, r6
 8002db0:	4639      	mov	r1, r7
 8002db2:	f7ff bb28 	b.w	8002406 <__ieee754_pow+0x3e>
 8002db6:	9204      	str	r2, [sp, #16]
 8002db8:	f7ff bb7a 	b.w	80024b0 <__ieee754_pow+0xe8>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f7ff bb64 	b.w	800248a <__ieee754_pow+0xc2>
 8002dc2:	bf00      	nop
 8002dc4:	f3af 8000 	nop.w
 8002dc8:	00000000 	.word	0x00000000
 8002dcc:	3fe62e43 	.word	0x3fe62e43
 8002dd0:	fefa39ef 	.word	0xfefa39ef
 8002dd4:	3fe62e42 	.word	0x3fe62e42
 8002dd8:	0ca86c39 	.word	0x0ca86c39
 8002ddc:	be205c61 	.word	0xbe205c61
 8002de0:	72bea4d0 	.word	0x72bea4d0
 8002de4:	3e663769 	.word	0x3e663769
 8002de8:	c5d26bf1 	.word	0xc5d26bf1
 8002dec:	3ebbbd41 	.word	0x3ebbbd41
 8002df0:	af25de2c 	.word	0xaf25de2c
 8002df4:	3f11566a 	.word	0x3f11566a
 8002df8:	16bebd93 	.word	0x16bebd93
 8002dfc:	3f66c16c 	.word	0x3f66c16c
 8002e00:	5555553e 	.word	0x5555553e
 8002e04:	3fc55555 	.word	0x3fc55555
 8002e08:	3fe00000 	.word	0x3fe00000
 8002e0c:	000fffff 	.word	0x000fffff
 8002e10:	3ff00000 	.word	0x3ff00000
 8002e14:	4090cbff 	.word	0x4090cbff
 8002e18:	3f6f3400 	.word	0x3f6f3400
 8002e1c:	652b82fe 	.word	0x652b82fe
 8002e20:	3c971547 	.word	0x3c971547

08002e24 <__ieee754_sqrt>:
 8002e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e28:	ec55 4b10 	vmov	r4, r5, d0
 8002e2c:	4e55      	ldr	r6, [pc, #340]	; (8002f84 <__ieee754_sqrt+0x160>)
 8002e2e:	43ae      	bics	r6, r5
 8002e30:	ee10 0a10 	vmov	r0, s0
 8002e34:	ee10 3a10 	vmov	r3, s0
 8002e38:	462a      	mov	r2, r5
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	d110      	bne.n	8002e60 <__ieee754_sqrt+0x3c>
 8002e3e:	ee10 2a10 	vmov	r2, s0
 8002e42:	462b      	mov	r3, r5
 8002e44:	f7fd fb7c 	bl	8000540 <__aeabi_dmul>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	4629      	mov	r1, r5
 8002e50:	f7fd f9c0 	bl	80001d4 <__adddf3>
 8002e54:	4604      	mov	r4, r0
 8002e56:	460d      	mov	r5, r1
 8002e58:	ec45 4b10 	vmov	d0, r4, r5
 8002e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e60:	2d00      	cmp	r5, #0
 8002e62:	dc10      	bgt.n	8002e86 <__ieee754_sqrt+0x62>
 8002e64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002e68:	4330      	orrs	r0, r6
 8002e6a:	d0f5      	beq.n	8002e58 <__ieee754_sqrt+0x34>
 8002e6c:	b15d      	cbz	r5, 8002e86 <__ieee754_sqrt+0x62>
 8002e6e:	ee10 2a10 	vmov	r2, s0
 8002e72:	462b      	mov	r3, r5
 8002e74:	ee10 0a10 	vmov	r0, s0
 8002e78:	f7fd f9aa 	bl	80001d0 <__aeabi_dsub>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	f7fd fc88 	bl	8000794 <__aeabi_ddiv>
 8002e84:	e7e6      	b.n	8002e54 <__ieee754_sqrt+0x30>
 8002e86:	1512      	asrs	r2, r2, #20
 8002e88:	d074      	beq.n	8002f74 <__ieee754_sqrt+0x150>
 8002e8a:	07d4      	lsls	r4, r2, #31
 8002e8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8002e90:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8002e94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002e98:	bf5e      	ittt	pl
 8002e9a:	0fda      	lsrpl	r2, r3, #31
 8002e9c:	005b      	lslpl	r3, r3, #1
 8002e9e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8002ea2:	2400      	movs	r4, #0
 8002ea4:	0fda      	lsrs	r2, r3, #31
 8002ea6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8002eaa:	107f      	asrs	r7, r7, #1
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	2516      	movs	r5, #22
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002eb6:	1886      	adds	r6, r0, r2
 8002eb8:	428e      	cmp	r6, r1
 8002eba:	bfde      	ittt	le
 8002ebc:	1b89      	suble	r1, r1, r6
 8002ebe:	18b0      	addle	r0, r6, r2
 8002ec0:	18a4      	addle	r4, r4, r2
 8002ec2:	0049      	lsls	r1, r1, #1
 8002ec4:	3d01      	subs	r5, #1
 8002ec6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8002eca:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8002ece:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002ed2:	d1f0      	bne.n	8002eb6 <__ieee754_sqrt+0x92>
 8002ed4:	462a      	mov	r2, r5
 8002ed6:	f04f 0e20 	mov.w	lr, #32
 8002eda:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8002ede:	4281      	cmp	r1, r0
 8002ee0:	eb06 0c05 	add.w	ip, r6, r5
 8002ee4:	dc02      	bgt.n	8002eec <__ieee754_sqrt+0xc8>
 8002ee6:	d113      	bne.n	8002f10 <__ieee754_sqrt+0xec>
 8002ee8:	459c      	cmp	ip, r3
 8002eea:	d811      	bhi.n	8002f10 <__ieee754_sqrt+0xec>
 8002eec:	f1bc 0f00 	cmp.w	ip, #0
 8002ef0:	eb0c 0506 	add.w	r5, ip, r6
 8002ef4:	da43      	bge.n	8002f7e <__ieee754_sqrt+0x15a>
 8002ef6:	2d00      	cmp	r5, #0
 8002ef8:	db41      	blt.n	8002f7e <__ieee754_sqrt+0x15a>
 8002efa:	f100 0801 	add.w	r8, r0, #1
 8002efe:	1a09      	subs	r1, r1, r0
 8002f00:	459c      	cmp	ip, r3
 8002f02:	bf88      	it	hi
 8002f04:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8002f08:	eba3 030c 	sub.w	r3, r3, ip
 8002f0c:	4432      	add	r2, r6
 8002f0e:	4640      	mov	r0, r8
 8002f10:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8002f14:	f1be 0e01 	subs.w	lr, lr, #1
 8002f18:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8002f1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002f20:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8002f24:	d1db      	bne.n	8002ede <__ieee754_sqrt+0xba>
 8002f26:	430b      	orrs	r3, r1
 8002f28:	d006      	beq.n	8002f38 <__ieee754_sqrt+0x114>
 8002f2a:	1c50      	adds	r0, r2, #1
 8002f2c:	bf13      	iteet	ne
 8002f2e:	3201      	addne	r2, #1
 8002f30:	3401      	addeq	r4, #1
 8002f32:	4672      	moveq	r2, lr
 8002f34:	f022 0201 	bicne.w	r2, r2, #1
 8002f38:	1063      	asrs	r3, r4, #1
 8002f3a:	0852      	lsrs	r2, r2, #1
 8002f3c:	07e1      	lsls	r1, r4, #31
 8002f3e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002f42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002f46:	bf48      	it	mi
 8002f48:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8002f4c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8002f50:	4614      	mov	r4, r2
 8002f52:	e781      	b.n	8002e58 <__ieee754_sqrt+0x34>
 8002f54:	0ad9      	lsrs	r1, r3, #11
 8002f56:	3815      	subs	r0, #21
 8002f58:	055b      	lsls	r3, r3, #21
 8002f5a:	2900      	cmp	r1, #0
 8002f5c:	d0fa      	beq.n	8002f54 <__ieee754_sqrt+0x130>
 8002f5e:	02cd      	lsls	r5, r1, #11
 8002f60:	d50a      	bpl.n	8002f78 <__ieee754_sqrt+0x154>
 8002f62:	f1c2 0420 	rsb	r4, r2, #32
 8002f66:	fa23 f404 	lsr.w	r4, r3, r4
 8002f6a:	1e55      	subs	r5, r2, #1
 8002f6c:	4093      	lsls	r3, r2
 8002f6e:	4321      	orrs	r1, r4
 8002f70:	1b42      	subs	r2, r0, r5
 8002f72:	e78a      	b.n	8002e8a <__ieee754_sqrt+0x66>
 8002f74:	4610      	mov	r0, r2
 8002f76:	e7f0      	b.n	8002f5a <__ieee754_sqrt+0x136>
 8002f78:	0049      	lsls	r1, r1, #1
 8002f7a:	3201      	adds	r2, #1
 8002f7c:	e7ef      	b.n	8002f5e <__ieee754_sqrt+0x13a>
 8002f7e:	4680      	mov	r8, r0
 8002f80:	e7bd      	b.n	8002efe <__ieee754_sqrt+0xda>
 8002f82:	bf00      	nop
 8002f84:	7ff00000 	.word	0x7ff00000

08002f88 <with_errno>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	460d      	mov	r5, r1
 8002f8e:	4616      	mov	r6, r2
 8002f90:	f7ff f978 	bl	8002284 <__errno>
 8002f94:	4629      	mov	r1, r5
 8002f96:	6006      	str	r6, [r0, #0]
 8002f98:	4620      	mov	r0, r4
 8002f9a:	bd70      	pop	{r4, r5, r6, pc}

08002f9c <xflow>:
 8002f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f9e:	4614      	mov	r4, r2
 8002fa0:	461d      	mov	r5, r3
 8002fa2:	b108      	cbz	r0, 8002fa8 <xflow+0xc>
 8002fa4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002fa8:	e9cd 2300 	strd	r2, r3, [sp]
 8002fac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	f7fd fac4 	bl	8000540 <__aeabi_dmul>
 8002fb8:	2222      	movs	r2, #34	; 0x22
 8002fba:	b003      	add	sp, #12
 8002fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fc0:	f7ff bfe2 	b.w	8002f88 <with_errno>

08002fc4 <__math_uflow>:
 8002fc4:	b508      	push	{r3, lr}
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002fcc:	f7ff ffe6 	bl	8002f9c <xflow>
 8002fd0:	ec41 0b10 	vmov	d0, r0, r1
 8002fd4:	bd08      	pop	{r3, pc}

08002fd6 <__math_oflow>:
 8002fd6:	b508      	push	{r3, lr}
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8002fde:	f7ff ffdd 	bl	8002f9c <xflow>
 8002fe2:	ec41 0b10 	vmov	d0, r0, r1
 8002fe6:	bd08      	pop	{r3, pc}

08002fe8 <fabs>:
 8002fe8:	ec51 0b10 	vmov	r0, r1, d0
 8002fec:	ee10 2a10 	vmov	r2, s0
 8002ff0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002ff4:	ec43 2b10 	vmov	d0, r2, r3
 8002ff8:	4770      	bx	lr

08002ffa <finite>:
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	ed8d 0b00 	vstr	d0, [sp]
 8003000:	9801      	ldr	r0, [sp, #4]
 8003002:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8003006:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800300a:	0fc0      	lsrs	r0, r0, #31
 800300c:	b002      	add	sp, #8
 800300e:	4770      	bx	lr

08003010 <scalbn>:
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	ec55 4b10 	vmov	r4, r5, d0
 8003016:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800301a:	4606      	mov	r6, r0
 800301c:	462b      	mov	r3, r5
 800301e:	b99a      	cbnz	r2, 8003048 <scalbn+0x38>
 8003020:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003024:	4323      	orrs	r3, r4
 8003026:	d036      	beq.n	8003096 <scalbn+0x86>
 8003028:	4b39      	ldr	r3, [pc, #228]	; (8003110 <scalbn+0x100>)
 800302a:	4629      	mov	r1, r5
 800302c:	ee10 0a10 	vmov	r0, s0
 8003030:	2200      	movs	r2, #0
 8003032:	f7fd fa85 	bl	8000540 <__aeabi_dmul>
 8003036:	4b37      	ldr	r3, [pc, #220]	; (8003114 <scalbn+0x104>)
 8003038:	429e      	cmp	r6, r3
 800303a:	4604      	mov	r4, r0
 800303c:	460d      	mov	r5, r1
 800303e:	da10      	bge.n	8003062 <scalbn+0x52>
 8003040:	a32b      	add	r3, pc, #172	; (adr r3, 80030f0 <scalbn+0xe0>)
 8003042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003046:	e03a      	b.n	80030be <scalbn+0xae>
 8003048:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800304c:	428a      	cmp	r2, r1
 800304e:	d10c      	bne.n	800306a <scalbn+0x5a>
 8003050:	ee10 2a10 	vmov	r2, s0
 8003054:	4620      	mov	r0, r4
 8003056:	4629      	mov	r1, r5
 8003058:	f7fd f8bc 	bl	80001d4 <__adddf3>
 800305c:	4604      	mov	r4, r0
 800305e:	460d      	mov	r5, r1
 8003060:	e019      	b.n	8003096 <scalbn+0x86>
 8003062:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003066:	460b      	mov	r3, r1
 8003068:	3a36      	subs	r2, #54	; 0x36
 800306a:	4432      	add	r2, r6
 800306c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003070:	428a      	cmp	r2, r1
 8003072:	dd08      	ble.n	8003086 <scalbn+0x76>
 8003074:	2d00      	cmp	r5, #0
 8003076:	a120      	add	r1, pc, #128	; (adr r1, 80030f8 <scalbn+0xe8>)
 8003078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800307c:	da1c      	bge.n	80030b8 <scalbn+0xa8>
 800307e:	a120      	add	r1, pc, #128	; (adr r1, 8003100 <scalbn+0xf0>)
 8003080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003084:	e018      	b.n	80030b8 <scalbn+0xa8>
 8003086:	2a00      	cmp	r2, #0
 8003088:	dd08      	ble.n	800309c <scalbn+0x8c>
 800308a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800308e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003092:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003096:	ec45 4b10 	vmov	d0, r4, r5
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80030a0:	da19      	bge.n	80030d6 <scalbn+0xc6>
 80030a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80030a6:	429e      	cmp	r6, r3
 80030a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80030ac:	dd0a      	ble.n	80030c4 <scalbn+0xb4>
 80030ae:	a112      	add	r1, pc, #72	; (adr r1, 80030f8 <scalbn+0xe8>)
 80030b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e2      	bne.n	800307e <scalbn+0x6e>
 80030b8:	a30f      	add	r3, pc, #60	; (adr r3, 80030f8 <scalbn+0xe8>)
 80030ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030be:	f7fd fa3f 	bl	8000540 <__aeabi_dmul>
 80030c2:	e7cb      	b.n	800305c <scalbn+0x4c>
 80030c4:	a10a      	add	r1, pc, #40	; (adr r1, 80030f0 <scalbn+0xe0>)
 80030c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0b8      	beq.n	8003040 <scalbn+0x30>
 80030ce:	a10e      	add	r1, pc, #56	; (adr r1, 8003108 <scalbn+0xf8>)
 80030d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030d4:	e7b4      	b.n	8003040 <scalbn+0x30>
 80030d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80030da:	3236      	adds	r2, #54	; 0x36
 80030dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80030e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80030e4:	4620      	mov	r0, r4
 80030e6:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <scalbn+0x108>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	e7e8      	b.n	80030be <scalbn+0xae>
 80030ec:	f3af 8000 	nop.w
 80030f0:	c2f8f359 	.word	0xc2f8f359
 80030f4:	01a56e1f 	.word	0x01a56e1f
 80030f8:	8800759c 	.word	0x8800759c
 80030fc:	7e37e43c 	.word	0x7e37e43c
 8003100:	8800759c 	.word	0x8800759c
 8003104:	fe37e43c 	.word	0xfe37e43c
 8003108:	c2f8f359 	.word	0xc2f8f359
 800310c:	81a56e1f 	.word	0x81a56e1f
 8003110:	43500000 	.word	0x43500000
 8003114:	ffff3cb0 	.word	0xffff3cb0
 8003118:	3c900000 	.word	0x3c900000

0800311c <_init>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	bf00      	nop
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr

08003128 <_fini>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	bf00      	nop
 800312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312e:	bc08      	pop	{r3}
 8003130:	469e      	mov	lr, r3
 8003132:	4770      	bx	lr
